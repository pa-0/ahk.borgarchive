<!-- Based on syntax highlighting from https://github.com/jNizM/ahk_notepad-plus-plus -->
<!-- This file should live in the Notepad++ program files folder, under autoCompletion\ -->
<!-- The only documentation I've found for the format of this file is here: https://web.archive.org/web/20190607225203/http://docs.notepad-plus-plus.org/index.php/Auto_Completion#Sorting -->
<?xml version="1.0" encoding="windows-1252"?>
<NotepadPlus>
    <AutoComplete language="AutoHotkey">
        <!-- Notepad++ Autocomplete for AutoHotkey -->
        <!-- Main wordlist by: fincs & SciTE4AutoHotkey v3.0.00 -->
        <!-- Credits: infogulch, jNizM, tidbit, twiz, vsub -->
		  <!-- *gdb - Added period (.) to additionalWordChar -->
        <Environment ignoreCase="yes" startFunc="(" stopFunc=")" paramSeparator="," terminal="" additionalWordChar="#{@."/>
        <KeyWord name="Abort"/>
        <KeyWord name="AboveNormal"/>
        <KeyWord name="Abs" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ACos" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>

        <!-- *gdb START CLASS: ActionObjectBase -->
        <KeyWord name="ActionObjectBase.copyLink" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Put a link to the the object on the clipboard.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ActionObjectBase.getLink" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the link for the object.
							; RETURNS:        Link to the web version of the object.
							; NOTES:          Should be overridden by child class.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ActionObjectBase.getLinkEdit" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the edit link for the object.
							; RETURNS:        Link to the edit version of the object.
							; NOTES:          Should be overridden by child class.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ActionObjectBase.getLinkWeb" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the web link for the object.
							; RETURNS:        Link to the web version of the object.
							; NOTES:          Should be overridden by child class.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ActionObjectBase.linkSelectedText" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the link for the object, and hyperlink the selected text with it.
							; PARAMETERS:
							;  problemMessage (I,OPT) - Problem message to include in the clipboard failure toast if we
							;                           weren't able to link the selected text.
							;---------">
                <Param name="problemMessage := &quot;Failed to link selected text&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ActionObjectBase.open" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Open the object.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: ActionObjectBase -->

        <KeyWord name="ActiveX"/>
        <KeyWord name="Add"/>
        <KeyWord name="AHK_class"/>
        <KeyWord name="AHK_exe"/>
        <KeyWord name="AHK_group"/>
        <KeyWord name="AHK_id"/>
        <KeyWord name="AHK_pid"/>
        <KeyWord name="All"/>
        <KeyWord name="Alnum"/>
        <KeyWord name="Alpha"/>
        <KeyWord name="Alt"/>
        <KeyWord name="AltDown"/>
        <KeyWord name="AltSubmit"/>
        <KeyWord name="AltTab"/>
        <KeyWord name="AltTabAndMenu"/>
        <KeyWord name="AltTabMenu"/>
        <KeyWord name="AltTabMenuDismiss"/>
        <KeyWord name="AltUp"/>
        <KeyWord name="AlwaysOnTop"/>
        <KeyWord name="And"/>
        <KeyWord name="AppsKey"/>
        <KeyWord name="Array"/>

        <!-- *gdb START CLASS: ArrayBase -->
        <KeyWord name="ArrayBase.appendArray" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Append the values from the given array to the end of this array.
							; PARAMETERS:
							;  arrayToAppend (I,REQ) - The array of values to add.
							;---------">
                <Param name="arrayToAppend" />
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.clear" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Remove all entries from this array.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.contains" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether this array contains a particular value.
							; PARAMETERS:
							;  needle (I,REQ) - The value to search the array for.
							; RETURNS:        The first index where we found the value in question.
							;                 &quot;&quot; if we didn't find it at all.
							;---------">
                <Param name="needle" />
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.count" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Temporary override for built-in .count() function, until everywhere I use AHK
							;                 is updated to at least 1.1.29.00.
							; RETURNS:        Number of elements in the array
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.join" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Combine all array values into a single string.
							; PARAMETERS:
							;  delim (I,OPT) - Delimiter to include between array entries. Defaults to a comma (,).
							; RETURNS:        Combined string
							;---------">
                <Param name="delim := &quot;,&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.removeDuplicates" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Removes any duplicate entries from the array, leaving the first instance alone.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.removeEmpties" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Removes any empty (&quot;&quot;) entries from the array.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ArrayBase.static" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Flag that lets us know that this is a proper array (not some other object).
							; RETURNS:        true
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: ArrayBase -->

        <KeyWord name="Asc" func="yes">
            <Overload retVal="">
                <Param name="&quot;String&quot;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ASin" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ATan" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="AutoSize"/>
        <KeyWord name="AutoTrim" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="A_AHKPath"/>
        <KeyWord name="A_AHKVersion"/>
        <KeyWord name="A_AppData"/>
        <KeyWord name="A_AppDataCommon"/>
        <KeyWord name="A_AutoTrim"/>
        <KeyWord name="A_BatchLines"/>
        <KeyWord name="A_CaretX"/>
        <KeyWord name="A_CaretY"/>
        <KeyWord name="A_ComputerName"/>
        <KeyWord name="A_ControlDelay"/>
        <KeyWord name="A_Cursor"/>
        <KeyWord name="A_DD"/>
        <KeyWord name="A_DDD"/>
        <KeyWord name="A_DDDD"/>
        <KeyWord name="A_DefaultMouseSpeed"/>
        <KeyWord name="A_Desktop"/>
        <KeyWord name="A_DesktopCommon"/>
        <KeyWord name="A_DetectHiddenText"/>
        <KeyWord name="A_DetectHiddenWindows"/>
        <KeyWord name="A_EndChar"/>
        <KeyWord name="A_EventInfo"/>
        <KeyWord name="A_ExitReason"/>
        <KeyWord name="A_FormatFloat"/>
        <KeyWord name="A_FormatInteger"/>
        <KeyWord name="A_Gui"/>
        <KeyWord name="A_GuiControl"/>
        <KeyWord name="A_GuiControlevent"/>
        <KeyWord name="A_GuiEvent"/>
        <KeyWord name="A_GuiHeight"/>
        <KeyWord name="A_GuiWidth"/>
        <KeyWord name="A_GuiX"/>
        <KeyWord name="A_GuiY"/>
        <KeyWord name="A_Hour"/>
        <KeyWord name="A_IconFile"/>
        <KeyWord name="A_IconHidden"/>
        <KeyWord name="A_IconNumber"/>
        <KeyWord name="A_IconTip"/>
        <KeyWord name="A_Index"/>
        <KeyWord name="A_IPAddress1"/>
        <KeyWord name="A_IPAddress2"/>
        <KeyWord name="A_IPAddress3"/>
        <KeyWord name="A_IPAddress4"/>
        <KeyWord name="A_IsAdmin"/>
        <KeyWord name="A_IsCompiled"/>
        <KeyWord name="A_IsCritical"/>
        <KeyWord name="A_IsPaused"/>
        <KeyWord name="A_IsSuspended"/>
        <KeyWord name="A_IsUnicode"/>
        <KeyWord name="A_KeyDelay"/>
        <KeyWord name="A_Language"/>
        <KeyWord name="A_LastError"/>
        <KeyWord name="A_LineFile"/>
        <KeyWord name="A_LineNumber"/>
        <KeyWord name="A_LoopField"/>
        <KeyWord name="A_LoopFileAttrib"/>
        <KeyWord name="A_LoopFileDir"/>
        <KeyWord name="A_LoopFileExt"/>
        <KeyWord name="A_LoopFileFullPath"/>
        <KeyWord name="A_LoopFileLongPath"/>
        <KeyWord name="A_LoopFileName"/>
        <KeyWord name="A_LoopFileShortName"/>
        <KeyWord name="A_LoopFileShortPath"/>
        <KeyWord name="A_LoopFileSize"/>
        <KeyWord name="A_LoopFileSizeKB"/>
        <KeyWord name="A_LoopFileSizeMB"/>
        <KeyWord name="A_LoopFileTimeAccessed"/>
        <KeyWord name="A_LoopFileTimeCreated"/>
        <KeyWord name="A_LoopFileTimeModified"/>
        <KeyWord name="A_LoopReadLine"/>
        <KeyWord name="A_LoopRegKey"/>
        <KeyWord name="A_LoopRegName"/>
        <KeyWord name="A_LoopRegSubKey"/>
        <KeyWord name="A_LoopRegTimeModified"/>
        <KeyWord name="A_LoopRegType"/>
        <KeyWord name="A_MDay"/>
        <KeyWord name="A_Min"/>
        <KeyWord name="A_MM"/>
        <KeyWord name="A_MMM"/>
        <KeyWord name="A_MMMM"/>
        <KeyWord name="A_Mon"/>
        <KeyWord name="A_MouseDelay"/>
        <KeyWord name="A_MSec"/>
        <KeyWord name="A_MyDocuments"/>
        <KeyWord name="A_Now"/>
        <KeyWord name="A_NowUTC"/>
        <KeyWord name="A_NumBatchLines"/>
        <KeyWord name="A_OSType"/>
        <KeyWord name="A_OSVersion"/>
        <KeyWord name="A_PriorHotkey"/>
        <KeyWord name="A_PriorKey"/>
        <KeyWord name="A_ProgramFiles"/>
        <KeyWord name="A_Programs"/>
        <KeyWord name="A_ProgramsCommon"/>
        <KeyWord name="A_PtrSize"/>
        <KeyWord name="A_ScreenHeight"/>
        <KeyWord name="A_ScreenWidth"/>
        <KeyWord name="A_ScriptDir"/>
        <KeyWord name="A_ScriptFullPath"/>
        <KeyWord name="A_ScriptHwnd"/>
        <KeyWord name="A_ScriptName"/>
        <KeyWord name="A_Sec"/>
        <KeyWord name="A_Space"/>
        <KeyWord name="A_StartMenu"/>
        <KeyWord name="A_StartMenuCommon"/>
        <KeyWord name="A_StartUp"/>
        <KeyWord name="A_StartUpcommon"/>
        <KeyWord name="A_StringCaseSense"/>
        <KeyWord name="A_Tab"/>
        <KeyWord name="A_Temp"/>
        <KeyWord name="A_ThisFunc"/>
        <KeyWord name="A_ThisHotkey"/>
        <KeyWord name="A_ThisLabel"/>
        <KeyWord name="A_ThisMenu"/>
        <KeyWord name="A_ThisMenuItem"/>
        <KeyWord name="A_ThisMenuItemPos"/>
        <KeyWord name="A_TickCount"/>
        <KeyWord name="A_TimeIdle"/>
        <KeyWord name="A_TimeIdlePhysical"/>
        <KeyWord name="A_TimeSincePriorHotkey"/>
        <KeyWord name="A_TimeSinceThisHotkey"/>
        <KeyWord name="A_TitleMatchMode"/>
        <KeyWord name="A_TitleMatchModeSpeed"/>
        <KeyWord name="A_Username"/>
        <KeyWord name="A_WDay"/>
        <KeyWord name="A_WinDelay"/>
        <KeyWord name="A_WinDir"/>
        <KeyWord name="A_WorkingDir"/>
        <KeyWord name="A_YDay"/>
        <KeyWord name="A_Year"/>
        <KeyWord name="A_YWeek"/>
        <KeyWord name="A_YYYY"/>
        <KeyWord name="Background"/>
        <KeyWord name="BackgroundTrans"/>
        <KeyWord name="BackSpace"/>
        <KeyWord name="Base"/>
        <KeyWord name="BelowNormal"/>
        <KeyWord name="Between"/>
        <KeyWord name="BitAnd"/>
        <KeyWord name="BitNot"/>
        <KeyWord name="BitOr"/>
        <KeyWord name="BitShiftLeft"/>
        <KeyWord name="BitShiftRight"/>
        <KeyWord name="BitXOr"/>
        <KeyWord name="Blind"/>
        <KeyWord name="BlockInput" func="no">
            <Overload retVal="">
                <Param name="Mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Bold"/>
        <KeyWord name="Border"/>
        <KeyWord name="Bottom"/>
        <KeyWord name="Break" func="no">
            <Overload retVal="">
                <Param name="LoopLabel"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Browser_Back"/>
        <KeyWord name="Browser_Favorites"/>
        <KeyWord name="Browser_Forward"/>
        <KeyWord name="Browser_Home"/>
        <KeyWord name="Browser_Refresh"/>
        <KeyWord name="Browser_Search"/>
        <KeyWord name="Browser_Stop"/>
        <KeyWord name="BS"/>
        <KeyWord name="Button"/>
        <KeyWord name="Buttons"/>
        <KeyWord name="ByRef"/>
        <KeyWord name="Cancel"/>
        <KeyWord name="Capacity"/>
        <KeyWord name="CapsLock"/>
        <KeyWord name="Caption"/>
        <KeyWord name="Catch" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Ceil" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Center"/>
        <KeyWord name="Check"/>
        <KeyWord name="Check3"/>
        <KeyWord name="Checkbox"/>
        <KeyWord name="Checked"/>
        <KeyWord name="CheckedGray"/>
        <KeyWord name="Choose"/>
        <KeyWord name="ChooseString"/>
        <KeyWord name="Chr" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Click"/>
        <KeyWord name="Clipboard"/>
        <KeyWord name="Clipboardall"/>

        <!-- *gdb START CLASS: ClipboardLib -->
        <KeyWord name="ClipboardLib.addToHistory" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Add something to the clipboard history, restoring the original clipboard value.
							; PARAMETERS:
							;  textToSave (I,REQ) - Text to add to the clipboard history.
							;---------">
                <Param name="textToSave" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.copyFilePathWithHotkey" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Copy a file path with the provided hotkeys, making sure that:
							;                  * We wait long enough for the file to get onto the clipboard
							;                  * The path has been cleaned up and mapped
							; PARAMETERS:
							;  hotkeyKeys (I,REQ) - The keys to send in order to copy the file to the clipboard.
							;---------">
                <Param name="hotkeyKeys" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.copyFolderPathWithHotkey" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Copy a folder path with the provided hotkeys, making sure that:
							;                  * We wait long enough for the folder to get onto the clipboard
							;                  * The path has been cleaned up and mapped
							;                  * There's a trailing backslash on the end
							; PARAMETERS:
							;  fileHotkeyKeys (I,REQ) - The keys to send in order to copy a FILE in the folder you want to the clipboard.
							;---------">
                <Param name="fileHotkeyKeys" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.copyWithFunction" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Copy something using the provided functor object, but make sure that we actually
							;                 get something on the clipboard.
							; PARAMETERS:
							;  boundFunc (I,REQ) - Functor object to run in order to copy something to the clipboard.
							; RETURNS:        true if we successfully copied something, false otherwise.
							;---------">
                <Param name="boundFunc" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.copyWithHotkey" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Copy something to the clipboard using the given hotkey, waiting for it to
							;                 take and returning whether we actually got something.
							; PARAMETERS:
							;  hotkeyKeys (I,REQ) - The keys to send in order to copy something to the clipboard.
							; RETURNS:        true if we successfully copied something, false otherwise.
							;---------">
                <Param name="hotkeyKeys" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.getWithFunction" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get some content using a BoundFunc object which copies something to the clipboard.
							; PARAMETERS:
							;  boundFunc (I,REQ) - A BoundFunc object created with Func.Bind() or ObjBindMethod(), which will
							;                      copy the desired content to the clipboard.
							; RETURNS:        The copied content.
							;---------">
                <Param name="boundFunc" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.getWithHotkey" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get some text by copying it to the clipboard using the given hotkey.
							; PARAMETERS:
							;  hotkeyKeys (I,REQ) - The keys to send in order to copy something to the clipboard.
							; RETURNS:        The copied text.
							;---------">
                <Param name="hotkeyKeys" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.send" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Send the provided text using the clipboard, restoring the clipboard afterwards.
							; PARAMETERS:
							;  value (I,REQ) - The text to send.
							;---------">
                <Param name="value" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.set" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Set the clipboard to the given value, and wait to make sure it applies before returning.
							; PARAMETERS:
							;  value         (I,REQ) - Value to set.
							;  origClipboard (O,OPT) - The original value of ClipboardAll (which is binary and contains
							;                          everything, not just the text on the clipboard). This can be used to
							;                          restore the clipboard later if needed.
							;---------">
                <Param name="value" />
                <Param name="ByRef origClipboard := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.setAndToast" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Set the clipboard to the given value and show a toast about it which includes the value.
							; PARAMETERS:
							;  newValue  (I,REQ) - The value to put on the clipboard.
							;  clipLabel (I,REQ) - The label to show in the toast for the thing on the clipboard.
							;---------">
                <Param name="newValue" />
                <Param name="clipLabel" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.setAndToastError" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Set the clipboard to the given value and show an error toast about it.
							; PARAMETERS:
							;  newValue       (I,REQ) - The value to put on the clipboard.
							;  clipLabel      (I,REQ) - The label to show in the toast for the thing on the clipboard.
							;  problemMessage (I,REQ) - The problem that occurred.
							;  errorMessage   (I,OPT) - What went wrong on a technical level.
							;---------">
                <Param name="newValue" />
                <Param name="clipLabel" />
                <Param name="problemMessage" />
                <Param name="errorMessage := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ClipboardLib.toastNewValue" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show a toast about the clipboard's current state (basically whether it's set or not),
							;                 also including the actual value.
							; PARAMETERS:
							;  clipLabel (I,REQ) - The label to show in the toast for the thing on the clipboard.
							;---------">
                <Param name="clipLabel" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: ClipboardLib -->

        <KeyWord name="ClipWait" func="no">
            <Overload retVal="">
                <Param name="SecondsToWait"/>
                <Param name="1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Close"/>
        <KeyWord name="Color"/>
        <KeyWord name="Combobox"/>

        <!-- *gdb START CLASS: CommonHotkeys -->
        <KeyWord name="CommonHotkeys.CommonHotkeys_doEmergencyExit" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrappers for CommonHotkeys.* functions that we can point hotkeys to directly.
							; NOTES:          We can technically point to the CommonHotkeys.* functions directly using
							;                 ObjBindMethod(), but that doesn't work with Suspend, Permit (to allow the hotkey
							;                 to work when the script is suspended). Some of these require that functionality,
							;                 so they're all out here for consistency's sake.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="CommonHotkeys.ConfirmExitOn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn on/off whether to prompt the user to confirm when exiting with the common exit hotkey (!+x).
							;---------">
                <Param name="message := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="CommonHotkeys.Init" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Set up the common hotkeys.
							; PARAMETERS:
							;  scriptType (I,REQ) - The &quot;type&quot; of script, from CommonHotkeys.ScriptType_*. This determines
							;                       which &quot;set&quot; of hotkeys are applied.
							;---------">
                <Param name="scriptType" />
            </Overload>
        </KeyWord>
        <KeyWord name="CommonHotkeys.IsMain" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Wrappers for checking which &quot;type&quot; the script is. These correspond to
							;                 CommonHotkeys.ScriptType_*.
							; RETURNS:        true if the script matches the type in question, false otherwise.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="CommonHotkeys.NoSuspendOn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn on/off whether to ignore the common suspend hotkey (!#x) or not.
							; SIDE EFFECTS:   Will actually turn the hotkey on or off.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: CommonHotkeys -->

        <KeyWord name="ComObjActive"/>
        <KeyWord name="ComObjArray"/>
        <KeyWord name="ComObjConnect"/>
        <KeyWord name="ComObjCreate"/>
        <KeyWord name="ComObjEnwrap"/>
        <KeyWord name="ComObjError"/>
        <KeyWord name="ComObjFlags"/>
        <KeyWord name="ComObjGet"/>
        <KeyWord name="ComObjMissing"/>
        <KeyWord name="ComObjParameter"/>
        <KeyWord name="ComObjQuery"/>
        <KeyWord name="ComObjType"/>
        <KeyWord name="ComObjUnwrap"/>
        <KeyWord name="ComObjValue"/>
        <KeyWord name="Comspec"/>

        <!-- *gdb START CLASS: Config -->
        <KeyWord name="Config.activateProgram" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Activate the window matching the specified name, running it if it doesn't yet exist.
							; PARAMETERS:
							;  name    (I,REQ) - The name of the window to activate.
							;  runArgs (I,OPT) - If the window doesn't currently exist, we'll run the corresponding program with these parameters.
							;---------">
                <Param name="name" />
                <Param name="runArgs := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.context" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Which context we're configured to act as, from the Context_* constants in this class.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.contextIsWork" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Convenience functions for checking whether we're currently in a certain context
							; RETURNS:        true if we are in the context in question, false otherwise.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.doesMediaPlayerExist" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether a window for the current media player exists.
							; RETURNS:        true if it does exist, false otherwise.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.doesWindowExist" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether the named window currently exists.
							; PARAMETERS:
							;  name (I,REQ) - Name of the window to check for.
							; RETURNS:        true if it exists, false otherwise.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.findWindowInfo" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Find the WindowInfo instance that matches the specified window.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies the window in question. Defaults to the active window.
							; RETURNS:        The WindowInfo instance matching the specified window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.findWindowName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Find the name of the specified window, if a WindowInfo instance exists.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies the window in question. Defaults to the active window.
							; RETURNS:        The NAME for the matched WindowInfo instance.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.Init" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Initialize this static config class. Loads information from various config files (see individual this.load* functions).
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.initialized" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Whether this class has been initialized. Used to not show debug popups when
							;                 it's not initialized, to cut down on popups on restart in high-traffic areas.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.isMediaPlayer" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Whether the named media player is what we're configured to use.
							; PARAMETERS:
							;  mediaPlayerName (I,REQ) - The name of the media player to check.
							; RETURNS:        true if we're configured to use the media player, false otherwise.
							;---------">
                <Param name="mediaPlayerName" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.isWindowActive" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether the named window is currently active.
							; PARAMETERS:
							;  name (I,REQ) - Name of the window to check for.
							; RETURNS:        true if it's active, false otherwise.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.machine" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Which machine we're configured to act as, from the Machine_* constants in this class.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.machineIsWorkLaptop" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Convenience functions for checking whether we're currently a certain machine.
							; RETURNS:        true if we are the machine in question, false otherwise.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.mediaPlayer" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The name of the media player to use (from the NAME column in mediaPlayers.tls).
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.path" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    A particular path from this class.
							; PARAMETERS:
							;  key (I,REQ) - The key for the path you want.
							;---------">
                <Param name="key" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.private" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The private information from the privates file from initialization.
							; PARAMETERS:
							;  key(I,REQ) - The key to the bit of private info you want.
							;---------">
                <Param name="key" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.replacePathTags" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Replace any tags matching path keys, with those corresponding paths.
							; PARAMETERS:
							;  inputString (I,REQ) - The string to search and replace within.
							; RETURNS:        The updated string
							;---------">
                <Param name="inputPath" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.replacePrivateTags" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Replace any tags matching private keys, with those corresponding private values.
							; PARAMETERS:
							;  inputString (I,REQ) - The string to search and replace within.
							; RETURNS:        The updated string
							;---------">
                <Param name="inputString" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.runMediaPlayer" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run the currently configured media player.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Config.runProgram" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run the program matching the specified name.
							; PARAMETERS:
							;  name (I,REQ) - The name of the program to run.
							;  args (I,OPT) - The arguments to run the program with.
							;---------">
                <Param name="name" />
                <Param name="args := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.windowInfo" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Return the WindowInfo instance corresponding to the provided name.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to retrieve info for.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="Config.windowIsGame" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether the specified window is a game (as identified in the games file passed in).
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies the window in question. Defaults to the active window.
							; RETURNS:        true if the specified window is a game, false otherwise.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: Config -->

        <KeyWord name="Contains"/>
        <KeyWord name="Continue" func="no">
            <Overload retVal="">
                <Param name="LoopLabel"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Control" func="no">
            <Overload retVal="">
                <Param name="Cmd"/>
                <Param name="Value"/>
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlClick" func="no">
            <Overload retVal="">
                <Param name="Control-or-Pos"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="WhichButton"/>
                <Param name="ClickCount"/>
                <Param name="Options"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlFocus" func="no">
            <Overload retVal="">
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlGet" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Cmd"/>
                <Param name="Value"/>
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlGetFocus" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlGetPos" func="no">
            <Overload retVal="">
                <Param name="X"/>
                <Param name="Y"/>
                <Param name="Width"/>
                <Param name="Height"/>
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlGetText" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlList"/>
        <KeyWord name="ControlListHWND"/>
        <KeyWord name="ControlMove" func="no">
            <Overload retVal="">
                <Param name="Control"/>
                <Param name="X"/>
                <Param name="Y"/>
                <Param name="Width"/>
                <Param name="Height"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlSend" func="no">
            <Overload retVal="">
                <Param name="Control"/>
                <Param name="Keys"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlSendRaw" func="no">
            <Overload retVal="">
                <Param name="Control"/>
                <Param name="Keys"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ControlSetText" func="no">
            <Overload retVal="">
                <Param name="Control"/>
                <Param name="NewText"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="CoordMode" func="no">
            <Overload retVal="">
                <Param name="ToolTip|Pixel|Mouse|Caret|Menu"/>
                <Param name="Screen|Window|Client"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Cos" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Count"/>
        <KeyWord name="Critical" func="no">
            <Overload retVal="">
                <Param name="On|Off|Interval"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Ctrl"/>
        <KeyWord name="CtrlBreak"/>
        <KeyWord name="CtrlDown"/>
        <KeyWord name="CtrlUp"/>

        <!-- *gdb START CLASS: DataLib -->
        <KeyWord name="DataLib.bitFieldHasFlag" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check for, add, and remove flags from a bitfield.
							; PARAMETERS:
							;  bitField (I,REQ) - The bitfield to check or modify.
							;  flag     (I,REQ) - The flag to check/add/remove.
							; RETURNS:        The resulting bitfield.
							;---------">
                <Param name="bitField" />
                <Param name="flag" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.convertObjectToArray" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Convert an object to an array.
							; PARAMETERS:
							;  obj (I,REQ) - The object to convert
							; RETURNS:        The resulting array
							; NOTES:          The indices are added in the same order as a For/in loop.
							;---------">
                <Param name="obj" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.convertPseudoArrayToArray" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Convert a pseudo-array into an actual array.
							; PARAMETERS:
							;  pseudoArrayName (I,REQ) - The name of the pseudo-array. This must be declared as a global prior
							;                            to calling this function.
							; RETURNS:        The resulting array
							; NOTES:          This only supports pseudo-arrays where the count is in the base variable
							;                 (i.e. Var = 5, Var1 is the first element, etc.)
							;---------">
                <Param name="pseudoArrayName" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.expandList" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Expand lists that can optionally contain numeric ranges (delimited by either
							;                 colons or hyphens). For example:
							;                  1,2:3,7,6-4 => [1, 2, 3, 7, 6, 5, 4]
							; PARAMETERS:
							;  listString (I,REQ) - The list to expand.
							; RETURNS:        The resulting array of expanded values.
							; NOTES:          Ranges with non-numeric values will be ignored (not included in the output array).
							;---------">
                <Param name="listString" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.firstNonBlankValue" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Find the first non-blank value from those given.
							; PARAMETERS:
							;  params* (I,REQ) - Variadic parameter - as many values as desired.
							; RETURNS:        The first non-blank value.
							;---------">
                <Param name="params*" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.forceArray" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    If the given object is already an array (or object) return it, otherwise turn it into one.
							; PARAMETERS:
							;  obj (I,REQ) - The object to force to be an array.
							; RETURNS:        An array (the obj parameter if it was one, or a new array with obj as the first and only value in it)
							;---------">
                <Param name="obj" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.forceNumber" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Force the given data to be a number.
							; PARAMETERS:
							;  data (I,REQ) - Data to force into a number.
							; RETURNS:        If it's already numeric, the number. Otherwise, 0.
							;---------">
                <Param name="data" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.hexToInteger" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Convert a hex number to an integer.
							; PARAMETERS:
							;  hexNum (I,REQ) - The hex number to convert
							; RETURNS:        The hex number as an integer.
							;---------">
                <Param name="hexNum" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.isNullOrEmpty" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether the provided object is empty, also checking if it's null.
							; PARAMETERS:
							;  obj (I,REQ) - The object/array to check.
							; RETURNS:        true if the provided object is null (including &quot;&quot;) or empty (no values inside), false otherwise.
							;---------">
                <Param name="obj" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.max" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Find the numberic maximum of the given numbers.
							; PARAMETERS:
							;  nums* (I,REQ) - Variadic parameter - as many numbers as desired.
							; RETURNS:        The numeric maximum of all given numbers.
							;---------">
                <Param name="nums*" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.mergeObjects" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Recursively merge two objects together into a new object containing the data from both.
							; PARAMETERS:
							;  baseObject (I,REQ) - The first object to merge.
							;  overrides  (I,REQ) - The second object to merge. If both objects have the same property/index,
							;                       this object's value will be included.
							;---------">
                <Param name="baseObject" />
                <Param name="overrides" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.numToInteger" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Convert the provided number into an integer/hex code.
							; PARAMETERS:
							;  num (I,REQ) - The number to convert
							; RETURNS:        The number as an integer/in hex.
							;---------">
                <Param name="num" />
            </Overload>
        </KeyWord>
        <KeyWord name="DataLib.updateMax" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for max() that updates the first parameter directly.
							; PARAMETERS:
							;  maxValue (IO,REQ) - The current maximum value. Will be updated if newValue is bigger.
							;  newValue  (I,REQ) - The new value to compare to the current maximum.
							;---------">
                <Param name="ByRef maxValue" />
                <Param name="newValue" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: DataLib -->

        <KeyWord name="Date"/>
        <KeyWord name="DateTime"/>

        <!-- *gdb START CLASS: DateTimeLib -->
        <KeyWord name="DateTimeLib.getLastDateOfMonth" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Figure out the last date in the provided month/year.
							; PARAMETERS:
							;  monthNum (I,OPT) - The month number to check
							;  year     (I,OPT) - The year to check
							; RETURNS:        The last date (with leading 0) in the given month.
							;---------">
                <Param name="monthNum := &quot;&quot;" />
                <Param name="year := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="DateTimeLib.replaceTags" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Replace tags matching different formats supported by FormatTime.
							; PARAMETERS:
							;  inString (I,REQ) - The string to replace tags in
							;  dateTime (I,OPT) - The date/time to use when replacing tags
							; RETURNS:        The updated string
							;---------">
                <Param name="inString" />
                <Param name="instant := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: DateTimeLib -->

        <KeyWord name="Days"/>
        <KeyWord name="DDL"/>

        <!-- *gdb START CLASS: Debug -->
        <KeyWord name="Debug.popup" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Display a popup of information about the information provided. See class
							;                 documentation for information about how we handle labels, values, arrays,
							;                 and objects.
							; PARAMETERS:
							;  params (I,REQ) - A variable number of arguments to display in the popup. For 1 argument,
							;                   we will interpret it as a value (not a label), but for >1 arguments an
							;                   even number of arguments should be passed in label,value pairs.
							; NOTES:          This function won't do anything before Config has initialized; this
							;                 is to prevent massive numbers of popups when debugging a function that it
							;                 uses (from each of the different standlone scripts that run). If you need
							;                 to show a popup before that point, you can use the .popupEarly() function
							;                 instead.
							;---------">
                <Param name="params*" />
            </Overload>
        </KeyWord>
        <KeyWord name="Debug.popupEarly" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Same as .popup(), but will run before Config is initialized. See
							;                 .popup() for details and parameters.
							;---------">
                <Param name="params*" />
            </Overload>
        </KeyWord>
        <KeyWord name="Debug.toast" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Display a toast (brief, semi-transparent display in the bottom-right) of
							;                 information about the information provided. See class documentation for
							;                 information about how we handle labels, values, arrays, and objects.
							; PARAMETERS:
							;  params (I,REQ) - A variable number of arguments to display in the popup. For 1 argument,
							;                   we will interpret it as a value (not a label), but for >1 arguments an
							;                   even number of arguments should be passed in label,value pairs.
							;---------">
                <Param name="params*" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: Debug -->

        <KeyWord name="Default"/>
        <KeyWord name="Del"/>
        <KeyWord name="Delete"/>
        <KeyWord name="DeleteAll"/>
        <KeyWord name="Delimiter"/>
        <KeyWord name="Deref"/>
        <KeyWord name="Destroy"/>
        <KeyWord name="DetectHiddenText" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DetectHiddenWindows" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Digit"/>
        <KeyWord name="Disable"/>
        <KeyWord name="Disabled"/>
        <KeyWord name="DllCall" func="yes">
            <Overload retVal="">
                <Param name="&quot;DllFile\Function&quot;"/>
            </Overload>
            <Overload retVal="">
                <Param name="&quot;DllFile\Function&quot;"/>
                <Param name="Type1"/>
                <Param name="Arg1"/>
                <Param name="Type2"/>
                <Param name="Arg2"/>
                <Param name="&quot;Cdecl ReturnType&quot;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Down"/>
        <KeyWord name="Drive" func="no">
            <Overload retVal="">
                <Param name="Sub-command"/>
                <Param name="Drive"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DriveGet" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Cmd"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DriveSpaceFree" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Path"/>
            </Overload>
        </KeyWord>
        <KeyWord name="DropDownList"/>

        <!-- *gdb START CLASS: Duration -->
        <KeyWord name="Duration" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new Duration object based on a duration string.
							; PARAMETERS:
							;  durationString (I,OPT) - A string describing how much time this Duration instance should
							;                           represent. See class header for format. If not given, we'll default
							;                           to no time (0 seconds).
							;---------">
                <Param name="durationString := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Duration.addTime" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Add/remove a certain amount of time to/from this Duration.
							; PARAMETERS:
							;  value    (I,REQ) - How much time to add or remove.
							;  unitChar (I,OPT) - Character (from Duration.Char_* constants) representing the unit you want
							;                     to add. Defaults to &quot;s&quot; (seconds).
							;---------">
                <Param name="value" />
                <Param name="unitChar := &quot;s&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Duration.addTimeFromDurationString" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Add a certain amount of time to this Duration.
							; PARAMETERS:
							;  durationString (I,REQ) - A string describing how much time we should add to this Duration.
							;                           See class header for format.
							;---------">
                <Param name="durationString" />
            </Overload>
        </KeyWord>
        <KeyWord name="Duration.displayTime" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    A string representation of the total time in the duration, broken down into
							;                 hours, minutes, and seconds. Hours (and their following :) are only included
							;                 if there are >0 hours, and minutes are the same (unless there are hours, in
							;                 which case minutes are always included). For example:
							;                   1:05:03
							;                   5:03
							;                   3
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Duration.hours" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Hours/minutes/seconds in this duration.
							; NOTES:          These counts take into account the other units - for example, a Duration with
							;                 1:01:00 will return &quot;1&quot; for minutes (not 61 minutes).
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Duration.isZero" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Whether the duration has no time remaining.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: Duration -->

        <KeyWord name="Edit"/>
        <KeyWord name="Eject"/>
        <KeyWord name="Else"/>
        <KeyWord name="Enable"/>
        <KeyWord name="Enabled"/>
        <KeyWord name="End"/>
        <KeyWord name="EndRepeat"/>
        <KeyWord name="Enter"/>
        <KeyWord name="EnvAdd" func="no">
            <Overload retVal="">
                <Param name="Var"/>
                <Param name="Value"/>
                <Param name="TimeUnits"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnvDiv" func="no">
            <Overload retVal="">
                <Param name="Var"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnvGet" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="EnvVarName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnvMult" func="no">
            <Overload retVal="">
                <Param name="Var"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnvSet" func="no">
            <Overload retVal="">
                <Param name="EnvVar"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnvSub" func="no">
            <Overload retVal="">
                <Param name="Var"/>
                <Param name="Value"/>
                <Param name="TimeUnits"/>
            </Overload>
        </KeyWord>
        <KeyWord name="EnvUpdate"/>

        <!-- *gdb START CLASS: EpicLib -->
        <KeyWord name="EpicLib.dropOffsetFromServerLocation" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Drop the offset (&quot;+4&quot; in &quot;tag+4^routine&quot;) from the given server
							;                 (so we'd return &quot;tag^routine&quot;).
							; PARAMETERS:
							;  serverLocation (I,REQ) - The server location to drop the offset from.
							; RETURNS:        The updated server code location.
							;---------">
                <Param name="serverLocation" />
            </Overload>
        </KeyWord>
        <KeyWord name="EpicLib.runHyperspace" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run Hyperspace locally for the given version and environment.
							; PARAMETERS:
							;  versionMajor (I,REQ) - Major version (before the dot in dotted version)
							;  versionMinor (I,REQ) - Minor version (last digit, after the dot in dotted version)
							;  environment  (I,OPT) - EpicComm ID for the environment to connect to.
							;---------">
                <Param name="versionMajor" />
                <Param name="versionMinor" />
                <Param name="environment" />
            </Overload>
        </KeyWord>
        <KeyWord name="EpicLib.runVDI" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Open a VDI matching the given ID.
							; PARAMETERS:
							;  vdiId (I,REQ) - The ID of the VDI to open.
							;---------">
                <Param name="vdiId" />
            </Overload>
        </KeyWord>
        <KeyWord name="EpicLib.splitServerLocation" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Split the given server location into tag and routine.
							; PARAMETERS:
							;  serverLocation (I,REQ) - The location in server code to split.
							;  routine        (O,OPT) - The routine
							;  tag            (O,OPT) - The tag. May include offset, see notes below.
							; NOTES:          Any offset from a tag will be included in the tag return value (i.e.
							;                 TAG+3^ROUTINE splits into routine=ROUTINE and tag=TAG+3).
							;---------">
                <Param name="serverLocation" />
                <Param name="ByRef routine := &quot;&quot;" />
                <Param name="ByRef tag := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: EpicLib -->


        <!-- *gdb START CLASS: EpicRecord -->
        <KeyWord name="EpicRecord" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new EpicRecord object, optionally parsing it from a string.
							; PARAMETERS:
							;  recordString (I,OPT) - String representing the record. See class header for supported
							;                         formats. If not given, record will need to be initialized with
							;                         one of the .initFrom*() functions.
							;---------">
                <Param name="recordString := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="EpicRecord.id" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The ID for this record.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="EpicRecord.ini" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The INI for this record.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="EpicRecord.initFromEMC2Title" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Initialize the record based on the current EMC2 window title.
							; NOTES:          This will only get the INI and ID, never the title.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="EpicRecord.initFromRecordString" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Initialize the record based on a string.
							; PARAMETERS:
							;  recordString (I,REQ) - String representing the record. See class header for supported
							;                         formats.
							;---------">
                <Param name="recordString" />
            </Overload>
        </KeyWord>
        <KeyWord name="EpicRecord.recordString" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    Constructed string representing the record:
							;                   If we have a title: TITLE [R INI ID]
							;                   If we don't have a title: R INI ID
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="EpicRecord.title" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The title for this record.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: EpicRecord -->

        <KeyWord name="Error"/>
        <KeyWord name="ErrorLevel"/>

        <!-- *gdb START CLASS: ErrorToast -->
        <KeyWord name="ErrorToast" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new ErrorToast object.
							; PARAMETERS:
							;  problemMessage    (I,REQ) - Text about what the problem is (what happened or weren't we able to do?)
							;  errorMessage      (I,OPT) - Technical error text (what happened code-wise?)
							;  mitigationMessage (I,OPT) - What we did instead (what did we do to make the failure less impactful?)
							;---------">
                <Param name="problemMessage" />
                <Param name="errorMessage := &quot;&quot;" />
                <Param name="mitigationMessage := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.blockingOn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn blocking on/off
							; RETURNS:        this
							; NOTES:          Blocking means that we'll sleep the calling script while the toast is showing
							;                 on a timer, rather than setting a timer and allowing execution to continue.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.close" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Hide and destroy the GUI for this toast.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.ErrorToast" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new Toast object.
							; PARAMETERS:
							;  toastText      (I,OPT) - The text to show in the toast.
							;  styleOverrides (I,OPT) - Any style overrides that you'd like to make. Defaults can be
							;                           found in .getStyles().
							;---------">
                <Param name="toastText := &quot;&quot;" />
                <Param name="styleOverrides := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.hide" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Fade the toast out, but don't destroy it (use .close() instead if you're
							;                 finished with the toast).
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.persistentOn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn persistence on/off
							; RETURNS:        this
							; NOTES:          Persistence means that the toast will be hidden (rather than destroyed) when we
							;                 finish showing it on a timer.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.setText" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Change the text for the toast.
							; PARAMETERS:
							;  toastText (I,REQ) - The text to show in the toast.
							; RETURNS:        this
							; NOTES:          Will try to maintain the same position, but toast size will expand to fit text.
							;---------">
                <Param name="toastText" />
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.show" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show this toast indefinitely, until it is hidden or closed.
							; PARAMETERS:
							;  x (I,OPT) - The x coordinate to show the toast at (or special value from VisualWindow.X_*).
							;              Defaults to previous position (if set), then right edge of screen.
							;  y (I,OPT) - The y coordinate to show the toast at (or special value from VisualWindow.Y_*).
							;              Defaults to previous position (if set), then bottom edge of screen.
							; RETURNS:        this
							;---------">
                <Param name="x := &quot;&quot;" />
                <Param name="y := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.showForSeconds" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show the toast for a certain number of seconds, then hide or destroy it (based
							;                 on whether it's marked as persistent).
							; PARAMETERS:
							;  numSeconds (I,REQ) - The number of seconds to show the toast for.
							;  x          (I,OPT) - The x coordinate to show the toast at (or special value from VisualWindow.X_*).
							;                       Defaults to previous position (if set), then right edge of screen.
							;  y          (I,OPT) - The y coordinate to show the toast at (or special value from VisualWindow.Y_*).
							;                       Defaults to previous position (if set), then bottom edge of screen.
							; RETURNS:        this
							;---------">
                <Param name="numSeconds" />
                <Param name="x := &quot;&quot;" />
                <Param name="y := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.showLong" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .showForSeconds for a &quot;long&quot; toast (shown for 5 seconds) in
							;                 the bottom-right corner of the screen.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.showMedium" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .showForSeconds for a &quot;medium&quot; toast (shown for 2 seconds) in
							;                 the bottom-right corner of the screen.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ErrorToast.showShort" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .showForSeconds for a &quot;short&quot; toast (shown for 1 second) in
							;                 the bottom-right corner of the screen.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: ErrorToast -->

        <KeyWord name="Esc"/>
        <KeyWord name="Escape"/>
        <KeyWord name="Exception"/>
        <KeyWord name="Exit" func="no">
            <Overload retVal="">
                <Param name="ExitCode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ExitApp" func="no">
            <Overload retVal="">
                <Param name="ExitCode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Exp" func="yes">
            <Overload retVal="">
                <Param name="N"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Expand"/>
        <KeyWord name="ExStyle"/>
        <KeyWord name="Extends"/>
        <KeyWord name="F1"/>
        <KeyWord name="F10"/>
        <KeyWord name="F11"/>
        <KeyWord name="F12"/>
        <KeyWord name="F13"/>
        <KeyWord name="F14"/>
        <KeyWord name="F15"/>
        <KeyWord name="F16"/>
        <KeyWord name="F17"/>
        <KeyWord name="F18"/>
        <KeyWord name="F19"/>
        <KeyWord name="F2"/>
        <KeyWord name="F20"/>
        <KeyWord name="F21"/>
        <KeyWord name="F22"/>
        <KeyWord name="F23"/>
        <KeyWord name="F24"/>
        <KeyWord name="F3"/>
        <KeyWord name="F4"/>
        <KeyWord name="F5"/>
        <KeyWord name="F6"/>
        <KeyWord name="F7"/>
        <KeyWord name="F8"/>
        <KeyWord name="F9"/>
        <KeyWord name="False"/>
        <KeyWord name="FileAppend" func="no">
            <Overload retVal="">
                <Param name="Text"/>
                <Param name="Filename"/>
                <Param name="Encoding"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileCopy" func="no">
            <Overload retVal="">
                <Param name="SourcePattern"/>
                <Param name="DestPattern"/>
                <Param name="Flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileCopyDir" func="no">
            <Overload retVal="">
                <Param name="Source"/>
                <Param name="Dest"/>
                <Param name="Flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileCreateDir" func="no">
            <Overload retVal="">
                <Param name="DirName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileCreateShortcut" func="no">
            <Overload retVal="">
                <Param name="Target"/>
                <Param name="LinkFile"/>
                <Param name="WorkingDir"/>
                <Param name="Args"/>
                <Param name="Description"/>
                <Param name="IconFile"/>
                <Param name="ShortcutKey"/>
                <Param name="IconNumber"/>
                <Param name="RunState"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileDelete" func="no">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileEncoding" func="no">
            <Overload retVal="">
                <Param name="Encoding"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileExist" func="yes">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileGetAttrib" func="yes">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileGetAttrib" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileGetShortcut" func="no">
            <Overload retVal="">
                <Param name="LinkFile"/>
                <Param name="OutTarget"/>
                <Param name="OutDir"/>
                <Param name="OutArgs"/>
                <Param name="OutDescription"/>
                <Param name="OutIcon"/>
                <Param name="OutIconNum"/>
                <Param name="OutRunState"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileGetSize" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
                <Param name="Units"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileGetTime" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
                <Param name="WhichTime"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileGetVersion" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileInstall" func="no">
            <Overload retVal="">
                <Param name="Source"/>
                <Param name="Dest"/>
                <Param name="Flag"/>
            </Overload>
        </KeyWord>

        <!-- *gdb START CLASS: FileLib -->
        <KeyWord name="FileLib.cleanupPath" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Clean out unwanted garbage strings from paths and map path to any mapped network drives.
							; PARAMETERS:
							;  path (I,REQ) - The path to clean.
							; RETURNS:        The cleaned-up and mapped path.
							;---------">
                <Param name="path" />
            </Overload>
        </KeyWord>
        <KeyWord name="FileLib.fileLinesToArray" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Read in a file and return it as an array.
							; PARAMETERS:
							;  fileName (I,REQ) - The path to the file to read in.
							; RETURNS:        The array of file lines.
							;---------">
                <Param name="fileName" />
            </Overload>
        </KeyWord>
        <KeyWord name="FileLib.findConfigFilePath" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Find the given config file, by searching the following places for it:
							;                  * The current folder
							;                  * The AHK root config folder
							;                  * The \local\ folder inside the AHK root config folder
							;                  * The \ahkPrivate\ folder inside the AHK root config folder
							; PARAMETERS:
							;  path (I,REQ) - The filename or path to locate.
							; RETURNS:        The absolute filepath, or &quot;&quot; if we couldn't find it.
							;---------">
                <Param name="path" />
            </Overload>
        </KeyWord>
        <KeyWord name="FileLib.folderExists" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether a folder exists at the given path.
							; PARAMETERS:
							;  folderPath (I,REQ) - The path to check for a folder.
							; RETURNS:        true if it exists, false otherwise.
							;---------">
                <Param name="folderPath" />
            </Overload>
        </KeyWord>
        <KeyWord name="FileLib.getParentFolder" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the parent of the provided path.
							; PARAMETERS:
							;  path     (I,REQ) - The path to start with.
							;  levelsUp (I,OPT) - How many levels to go up (where 1 is the parent of that path). Defaults to 1.
							; RETURNS:        The parent (or higher depending of levelsUp) folder.
							;---------">
                <Param name="path" />
                <Param name="levelsUp := 1" />
            </Overload>
        </KeyWord>
        <KeyWord name="FileLib.replaceFileWithString" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Replace the given file's contents with the provided string.
							; PARAMETERS:
							;  filePath    (I,REQ) - The path to the file to update.
							;  newContents (I,REQ) - The contents to replace the file's contents with.
							;---------">
                <Param name="filePath" />
                <Param name="newContents" />
            </Overload>
        </KeyWord>
        <KeyWord name="FileLib.sendPath" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Send a file or folder path in a particular format.
							; PARAMETERS:
							;  folderName       (I,REQ) - The name of the file/folder in Config's paths or privates.
							;  subPath          (I,OPT) - The additional path to add to the end.
							;  slashChar        (I,OPT) - The slash (forward or back) character to use in between the path
							;                             and additional subPath, and at the end if addTrailingSlash = true.
							;  addTrailingSlash (I,OPT) - Set to true to add a trailing slash to the end of the path.
							;---------">
                <Param name="folderName" />
                <Param name="subPath := &quot;&quot;" />
                <Param name="slashChar := &quot;\&quot;" />
                <Param name="addTrailingSlash := false" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: FileLib -->

        <KeyWord name="FileMove" func="no">
            <Overload retVal="">
                <Param name="SourcePattern"/>
                <Param name="DestPattern"/>
                <Param name="Flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileMoveDir" func="no">
            <Overload retVal="">
                <Param name="Source"/>
                <Param name="Dest"/>
                <Param name="Flag"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileOpen" func="yes">
            <Overload retVal="">
                <Param name="Filename"/>
                <Param name="Flags"/>
                <Param name="Encoding"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileRead" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileReadLine" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
                <Param name="LineNum"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileRecycle" func="no">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileRecycleEmpty" func="no">
            <Overload retVal="">
                <Param name="DriveLetter"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileRemoveDir" func="no">
            <Overload retVal="">
                <Param name="DirName"/>
                <Param name="Recurse?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSelectFile" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Options"/>
                <Param name="RootDir\Filename"/>
                <Param name="Prompt"/>
                <Param name="Filter"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSelectFolder" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="StartingFolder"/>
                <Param name="Options"/>
                <Param name="Prompt"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSetAttrib" func="no">
            <Overload retVal="">
                <Param name="Attributes"/>
                <Param name="Filepattern"/>
                <Param name="OperateOnFolders?"/>
                <Param name="Recurse?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSetTime" func="no">
            <Overload retVal="">
                <Param name="YYYYMMDDHH24MISS"/>
                <Param name="FilePattern"/>
                <Param name="WhichTime"/>
                <Param name="OperateOnFolders?"/>
                <Param name="Recurse?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="FileSystem"/>
        <KeyWord name="First"/>
        <KeyWord name="Flash"/>
        <KeyWord name="Float"/>
        <KeyWord name="Floatfast"/>
        <KeyWord name="Floor" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Focus"/>
        <KeyWord name="Font"/>
        <KeyWord name="For" func="no">
            <Overload retVal="">
                <Param name="Key"/>
                <Param name="Value"/>
                <Param name="Expression"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Force"/>

        <!-- *gdb START CLASS: FormatList -->
        <KeyWord name="FormatList" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new FormatList object.
							; PARAMETERS:
							;  listObject (I,REQ) - Object representing the list, may be an array or delimited string.
							;  inFormat   (I,OPT) - Format that the list is in (from FormatList.Format_* constants). If not
							;                       given, we will try to determine it ourselves and prompt the user if we
							;                       can't figure it out.
							;---------">
                <Param name="listObject" />
                <Param name="inFormat := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="FormatList.getList" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the list in a certain format, programmatically.
							; PARAMETERS:
							;  format (I,OPT) - Format to get the list in. If not given, we'll prompt the user for it.
							; RETURNS:        The list, in the chosen format.
							;---------">
                <Param name="format := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="FormatList.sendList" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Send the list to the current window, in a certain format.
							; PARAMETERS:
							;  format (I,OPT) - Format to send the list in. If not given, we'll prompt the user for it.
							;---------">
                <Param name="format := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: FormatList -->

        <KeyWord name="FormatTime" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="YYYYMMDDHH24MISS"/>
                <Param name="Format"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Func" func="yes">
            <Overload retVal="">
                <Param name="FunctionName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetKeyName" func="yes">
            <Overload retVal="">
                <Param name="Key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetKeySC" func="yes">
            <Overload retVal="">
                <Param name="Key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetKeyState" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="KeyName"/>
                <Param name="Mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetKeyState" func="yes">
            <Overload retVal="">
                <Param name="&quot;KeyName&quot;"/>
                <Param name="&quot;Mode&quot;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GetKeyVK" func="yes">
            <Overload retVal="">
                <Param name="Key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Global"/>
        <KeyWord name="Gosub" func="no">
            <Overload retVal="">
                <Param name="Label"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Goto" func="no">
            <Overload retVal="">
                <Param name="Label"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Grid"/>
        <KeyWord name="Group"/>
        <KeyWord name="GroupActivate" func="no">
            <Overload retVal="">
                <Param name="GroupName"/>
                <Param name="R"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GroupAdd" func="no">
            <Overload retVal="">
                <Param name="GroupName"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="Label"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GroupBox"/>
        <KeyWord name="GroupClose" func="no">
            <Overload retVal="">
                <Param name="GroupName"/>
                <Param name="A|R"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GroupDeactivate" func="no">
            <Overload retVal="">
                <Param name="GroupName"/>
                <Param name="R"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Gui" func="no">
            <Overload retVal="">
                <Param name="Sub-command"/>
                <Param name="Param2"/>
                <Param name="Param3"/>
                <Param name="Param4"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GuiClose"/>
        <KeyWord name="GuiContextMenu"/>
        <KeyWord name="GuiControl" func="no">
            <Overload retVal="">
                <Param name="Sub-command"/>
                <Param name="ControlID"/>
                <Param name="Param3"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GuiControlGet" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Sub-command"/>
                <Param name="ControlID"/>
                <Param name="Param4"/>
            </Overload>
        </KeyWord>
        <KeyWord name="GuiDropFiles"/>
        <KeyWord name="GuiEscape"/>

        <!-- *gdb START CLASS: GuiLib -->
        <KeyWord name="GuiLib.applyTitleFormat" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Apply/clear a title format (heavy weight, underline) for the next set of
							;                 controls being added to the gui.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="GuiLib.createDynamicGlobal" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create/get the value of a global which can be used with a control, to
							;                 reference that control (with GuiControl) or get the value of the control
							;                 (with .getDynamicGlobal) later.
							; PARAMETERS:
							;  varName (I,REQ) - The name of the global variable to create/get the value of.
							; RETURNS:        getDynamicGlobal: the value in the specified global.
							; NOTES:          This basically exists to let us hide the static/global requirement for
							;                 variables used by gui controls - as long as the global is only referenced
							;                 via indirection, it won't be treated as a local variable in other functions.
							;---------">
                <Param name="varName" />
            </Overload>
        </KeyWord>
        <KeyWord name="GuiLib.getLabelSizeForText" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the size of a label with the given text.
							; PARAMETERS:
							;  text   (I,REQ) - The text to measure the size of.
							;  width  (O,OPT) - The width of the label needed to hold the given text.
							;  height (O,OPT) - The height of the label needed to hold the given text.
							; SIDE EFFECTS:   This adds a hidden label to the gui (specifically, adds it so we can see the
							;                 size, then hides it).
							; NOTES:          This assumes that the formatting/default gui for the text in question are
							;                 already in effect.
							;---------">
                <Param name="text" />
                <Param name="ByRef width := &quot;&quot;" />
                <Param name="ByRef height := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="GuiLib.showConfirmationPopup" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show the user a yes/no confirmation popup to the user.
							; PARAMETERS:
							;  message (I,REQ) - The message to show in the popup.
							;  title   (I,OPT) - The title of the popup
							; RETURNS:        true/false - whether the user clicked the &quot;Yes&quot; button.
							;---------">
                <Param name="message" />
                <Param name="title := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: GuiLib -->

        <KeyWord name="GuiSize"/>
        <KeyWord name="Hdr"/>
        <KeyWord name="Hidden"/>
        <KeyWord name="Hide"/>
        <KeyWord name="HideAutoItWin"/>
        <KeyWord name="High"/>
        <KeyWord name="HKCC"/>
        <KeyWord name="HKCR"/>
        <KeyWord name="HKCU"/>
        <KeyWord name="HKEY_CLASSES_ROOT"/>
        <KeyWord name="HKEY_CURRENT_CONFIG"/>
        <KeyWord name="HKEY_CURRENT_USER"/>
        <KeyWord name="HKEY_CURRENT_USER"/>
        <KeyWord name="HKEY_LOCAL_MACHINE"/>
        <KeyWord name="HKEY_USERS"/>
        <KeyWord name="HKLM"/>
        <KeyWord name="HKU"/>
        <KeyWord name="Home"/>
        <KeyWord name="Hotkey" func="no">
            <Overload retVal="">
                <Param name="KeyName"/>
                <Param name="Label"/>
                <Param name="Options"/>
            </Overload>
            <Overload retVal="">
                <Param name="IfWinActive/Exists"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
            </Overload>
            <Overload retVal="">
                <Param name="If"/>
                <Param name="Expression"/>
            </Overload>
        </KeyWord>

        <!-- *gdb START CLASS: HotkeyLib -->
        <KeyWord name="HotkeyLib.releaseAllModifiers" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Release all modifier keys. This is useful when certain modifier keys get &quot;stuck&quot; down.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="HotkeyLib.waitForRelease" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wait for the given hotkey to be fully released (all modifiers included).
							; PARAMETERS:
							;  hotkeyString (I,OPT) - The hotkey to wait on. If not set, we'll use A_ThisHotkey to get the
							;                         hotkey that triggered this function.
							;---------">
                <Param name="hotkeyString := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: HotkeyLib -->

        <KeyWord name="Hours"/>
        <KeyWord name="HScroll"/>
        <KeyWord name="Hwnd"/>

        <!-- *gdb START CLASS: Hyperlinker -->
        <KeyWord name="Hyperlinker.Init" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Initialize this class with the windows that support hyperlinking and their methods.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Hyperlinker.linkSelectedText" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Link the selected text with the given URL/path.
							; PARAMETERS:
							;  path         (I,REQ) - URL or file path to link to.
							;  errorMessage (O,OPT) - Error message about what went wrong if we return False.
							; RETURNS:        True if successful, False if something went wrong.
							;---------">
                <Param name="path" />
                <Param name="ByRef errorMessage := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: Hyperlinker -->

        <KeyWord name="Icon"/>
        <KeyWord name="IconSmall"/>
        <KeyWord name="ID"/>
        <KeyWord name="IDLast"/>
        <KeyWord name="If" func="no">
            <Overload retVal="">
                <Param name="var"/>
            </Overload>
        </KeyWord>
        <KeyWord name="If" func="yes">
            <Overload retVal="">
                <Param name="expression"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfEqual" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfExist" func="no">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfExist" func="yes">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfGreater" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfGreaterOrEqual" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfInString" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="SearchString"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfLess" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfLessOrEqual" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfMsgBox" func="no">
            <Overload retVal="">
                <Param name="ButtonName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfNotEqual" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfNotExist" func="no">
            <Overload retVal="">
                <Param name="FilePattern"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfNotInString" func="no">
            <Overload retVal="">
                <Param name="var"/>
                <Param name="SearchString"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfWinActive" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfWinExist" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfWinNotActive" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IfWinNotExist" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Ignore"/>
        <KeyWord name="IL_Add"/>
        <KeyWord name="IL_Create"/>
        <KeyWord name="IL_Destroy"/>
        <KeyWord name="ImageList"/>
        <KeyWord name="ImageSearch" func="no">
            <Overload retVal="">
                <Param name="OutputVarX"/>
                <Param name="OutputVarY"/>
                <Param name="X1"/>
                <Param name="Y1"/>
                <Param name="X2"/>
                <Param name="Y2"/>
                <Param name="ImageFile"/>
            </Overload>
        </KeyWord>
        <KeyWord name="In"/>
        <KeyWord name="IniDelete" func="no">
            <Overload retVal="">
                <Param name="Filename"/>
                <Param name="Section"/>
                <Param name="Key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IniRead" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Filename"/>
                <Param name="Section"/>
                <Param name="Key"/>
                <Param name="Default"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IniWrite" func="no">
            <Overload retVal="">
                <Param name="Value"/>
                <Param name="Filename"/>
                <Param name="Section"/>
                <Param name="Key"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Input" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Options"/>
                <Param name="EndKeys"/>
                <Param name="MatchList"/>
            </Overload>
        </KeyWord>
        <KeyWord name="InputBox" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Title"/>
                <Param name="Prompt"/>
                <Param name="HIDE"/>
                <Param name="Width"/>
                <Param name="Height"/>
                <Param name="X"/>
                <Param name="Y"/>
                <Param name="Font"/>
                <Param name="Timeout"/>
                <Param name="Default"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Ins"/>
        <KeyWord name="Insert"/>
        <KeyWord name="InStr" func="yes">
            <Overload retVal="">
                <Param name="Haystack"/>
                <Param name="Needle"/>
                <Param name="CaseSensitive = false"/>
                <Param name="StartingPos = 1"/>
                <Param name="Occurrence = 1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Integer"/>
        <KeyWord name="IntegerFast"/>
        <KeyWord name="Interrupt"/>
        <KeyWord name="Is"/>
        <KeyWord name="IsByref" func="yes">
            <Overload retVal="">
                <Param name="Var"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsFunc" func="yes">
            <Overload retVal="">
                <Param name="FunctionName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsLabel" func="yes">
            <Overload retVal="">
                <Param name="LabelName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="IsObject" func="yes">
            <Overload retVal="">
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Italic"/>
        <KeyWord name="Joy1"/>
        <KeyWord name="Joy10"/>
        <KeyWord name="Joy11"/>
        <KeyWord name="Joy12"/>
        <KeyWord name="Joy13"/>
        <KeyWord name="Joy14"/>
        <KeyWord name="Joy15"/>
        <KeyWord name="Joy16"/>
        <KeyWord name="Joy17"/>
        <KeyWord name="Joy18"/>
        <KeyWord name="Joy19"/>
        <KeyWord name="Joy2"/>
        <KeyWord name="Joy20"/>
        <KeyWord name="Joy21"/>
        <KeyWord name="Joy22"/>
        <KeyWord name="Joy23"/>
        <KeyWord name="Joy24"/>
        <KeyWord name="Joy25"/>
        <KeyWord name="Joy26"/>
        <KeyWord name="Joy27"/>
        <KeyWord name="Joy28"/>
        <KeyWord name="Joy29"/>
        <KeyWord name="Joy3"/>
        <KeyWord name="Joy30"/>
        <KeyWord name="Joy31"/>
        <KeyWord name="Joy32"/>
        <KeyWord name="Joy4"/>
        <KeyWord name="Joy5"/>
        <KeyWord name="Joy6"/>
        <KeyWord name="Joy7"/>
        <KeyWord name="Joy8"/>
        <KeyWord name="Joy9"/>
        <KeyWord name="JoyAxes"/>
        <KeyWord name="JoyButtons"/>
        <KeyWord name="JoyInfo"/>
        <KeyWord name="JoyName"/>
        <KeyWord name="JoyPOV"/>
        <KeyWord name="JoyR"/>
        <KeyWord name="JoyU"/>
        <KeyWord name="JoyV"/>
        <KeyWord name="Joyx"/>
        <KeyWord name="JoyY"/>
        <KeyWord name="JoyZ"/>
        <KeyWord name="KeyHistory"/>
        <KeyWord name="KeyWait" func="no">
            <Overload retVal="">
                <Param name="KeyName"/>
                <Param name="Options"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Label"/>
        <KeyWord name="LAlt"/>
        <KeyWord name="LastFound"/>
        <KeyWord name="LastFoundExist"/>
        <KeyWord name="Launch_App1"/>
        <KeyWord name="Launch_App2"/>
        <KeyWord name="Launch_Mail"/>
        <KeyWord name="Launch_Media"/>
        <KeyWord name="LButton"/>
        <KeyWord name="LControl"/>
        <KeyWord name="LCtrl"/>
        <KeyWord name="Left"/>
        <KeyWord name="LeftClick"/>
        <KeyWord name="LeftClickDrag"/>
        <KeyWord name="Limit"/>
        <KeyWord name="Lines"/>
        <KeyWord name="Link"/>
        <KeyWord name="List"/>
        <KeyWord name="ListBox"/>
        <KeyWord name="ListHotkeys"/>
        <KeyWord name="ListLines" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ListVars"/>
        <KeyWord name="ListView"/>
        <KeyWord name="Ln" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Local"/>
        <KeyWord name="Lock"/>
        <KeyWord name="Log" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="LogOff"/>
        <KeyWord name="Loop" func="no">
            <Overload retVal="">
                <Param name="Count"/>
            </Overload>
            <Overload retVal="">
                <Param name="FilePattern"/>
                <Param name="IncludeFolders?"/>
                <Param name="Recurse?"/>
            </Overload>
            <Overload retVal="">
                <Param name="Parse"/>
                <Param name="InputVar"/>
                <Param name="Delimiters"/>
                <Param name="OmitChars"/>
            </Overload>
            <Overload retVal="">
                <Param name="Read"/>
                <Param name="InputFile"/>
                <Param name="OutputFile"/>
            </Overload>
            <Overload retVal="">
                <Param name="RootKey"/>
                <Param name="Key"/>
                <Param name="IncludeSubKeys?"/>
                <Param name="Recurse?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Loop" func="yes">
            <Overload retVal="">
                <Param name="files &amp; folders"/>
            </Overload>
            <Overload retVal="">
                <Param name="normal"/>
            </Overload>
            <Overload retVal="">
                <Param name="parse a string"/>
            </Overload>
            <Overload retVal="">
                <Param name="read file contents"/>
            </Overload>
            <Overload retVal="">
                <Param name="registry"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Low"/>
        <KeyWord name="Lower"/>
        <KeyWord name="Lowercase"/>
        <KeyWord name="LShift"/>
        <KeyWord name="LTrim"/>
        <KeyWord name="LV_Add"/>
        <KeyWord name="LV_Delete"/>
        <KeyWord name="LV_DeleteCol"/>
        <KeyWord name="LV_GetCount"/>
        <KeyWord name="LV_GetNext"/>
        <KeyWord name="LV_GetText"/>
        <KeyWord name="LV_Insert"/>
        <KeyWord name="LV_InsertCol"/>
        <KeyWord name="LV_Modify"/>
        <KeyWord name="LV_ModifyCol"/>
        <KeyWord name="LV_SetImagelist"/>
        <KeyWord name="LWin"/>
        <KeyWord name="LWinDown"/>
        <KeyWord name="LWinUp"/>
        <KeyWord name="MainWindow"/>
        <KeyWord name="Margin"/>
        <KeyWord name="Maximize"/>
        <KeyWord name="MaximizeBox"/>
        <KeyWord name="MButton"/>
        <KeyWord name="Media_Next"/>
        <KeyWord name="Media_Play_Pause"/>
        <KeyWord name="Media_Prev"/>
        <KeyWord name="Media_Stop"/>
        <KeyWord name="Menu" func="no">
            <Overload retVal="">
                <Param name="MenuName"/>
                <Param name="Cmd"/>
                <Param name="P3"/>
                <Param name="P4"/>
                <Param name="P5"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Minimize"/>
        <KeyWord name="MinimizeBox"/>
        <KeyWord name="MinMax"/>
        <KeyWord name="Minutes"/>
        <KeyWord name="Mod" func="yes">
            <Overload retVal="">
                <Param name="Dividend"/>
                <Param name="Divisor"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MonitorCount"/>
        <KeyWord name="MonitorName"/>
        <KeyWord name="MonitorPrimary"/>
        <KeyWord name="MonitorWorkArea"/>
        <KeyWord name="MonthCal"/>
        <KeyWord name="Mouse"/>
        <KeyWord name="MouseClick" func="no">
            <Overload retVal="">
                <Param name="WhichButton"/>
                <Param name="X"/>
                <Param name="Y"/>
                <Param name="ClickCount"/>
                <Param name="Speed"/>
                <Param name="D|U"/>
                <Param name="R"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MouseClickDrag" func="no">
            <Overload retVal="">
                <Param name="WhichButton"/>
                <Param name="X1"/>
                <Param name="Y1"/>
                <Param name="X2"/>
                <Param name="Y2"/>
                <Param name="Speed"/>
                <Param name="R"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MouseGetPos" func="no">
            <Overload retVal="">
                <Param name="OutputVarX"/>
                <Param name="OutputVarY"/>
                <Param name="OutputVarWin"/>
                <Param name="OutputVarControl"/>
                <Param name="1|2|3"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MouseMove" func="no">
            <Overload retVal="">
                <Param name="X"/>
                <Param name="Y"/>
                <Param name="Speed"/>
                <Param name="R"/>
            </Overload>
        </KeyWord>
        <KeyWord name="MouseMoveOff"/>
        <KeyWord name="Move"/>
        <KeyWord name="MsgBox" func="no">
            <Overload retVal="">
                <Param name="Text"/>
            </Overload>
            <Overload retVal="">
                <Param name="Options"/>
                <Param name="Title"/>
                <Param name="Text"/>
                <Param name="Timeout"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Multi"/>
        <KeyWord name="Na"/>
        <KeyWord name="New"/>
        <KeyWord name="No"/>
        <KeyWord name="NoActivate"/>
        <KeyWord name="NoDefault"/>
        <KeyWord name="NoHide"/>
        <KeyWord name="NoIcon"/>
        <KeyWord name="NoMainWindow"/>
        <KeyWord name="Norm"/>
        <KeyWord name="Normal"/>
        <KeyWord name="NoSort"/>
        <KeyWord name="NoSortHDR"/>
        <KeyWord name="NoStandard"/>
        <KeyWord name="Not"/>
        <KeyWord name="NoTab"/>
        <KeyWord name="NoTimers"/>
        <KeyWord name="Number"/>
        <KeyWord name="NumGet" func="yes">
            <Overload retVal="">
                <Param name="VarOrAddress"/>
            </Overload>
            <Overload retVal="">
                <Param name="VarOrAddress"/>
                <Param name="Offset = 0"/>
                <Param name="Type = &quot;UInt&quot;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="NumLock"/>
        <KeyWord name="Numpad0"/>
        <KeyWord name="Numpad1"/>
        <KeyWord name="Numpad2"/>
        <KeyWord name="Numpad3"/>
        <KeyWord name="Numpad4"/>
        <KeyWord name="Numpad5"/>
        <KeyWord name="Numpad6"/>
        <KeyWord name="Numpad7"/>
        <KeyWord name="Numpad8"/>
        <KeyWord name="Numpad9"/>
        <KeyWord name="NumpadAdd"/>
        <KeyWord name="NumpadClear"/>
        <KeyWord name="NumpadDel"/>
        <KeyWord name="NumpadDiv"/>
        <KeyWord name="NumpadDot"/>
        <KeyWord name="NumpadDown"/>
        <KeyWord name="NumpadEnd"/>
        <KeyWord name="NumpadEnter"/>
        <KeyWord name="NumpadHome"/>
        <KeyWord name="NumpadIns"/>
        <KeyWord name="NumpadLeft"/>
        <KeyWord name="NumpadMult"/>
        <KeyWord name="NumpadPgdn"/>
        <KeyWord name="NumpadPgup"/>
        <KeyWord name="NumpadRight"/>
        <KeyWord name="NumpadSub"/>
        <KeyWord name="NumpadUp"/>
        <KeyWord name="NumPut" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
                <Param name="VarOrAddress"/>
            </Overload>
            <Overload retVal="">
                <Param name="Number"/>
                <Param name="VarOrAddress"/>
                <Param name="Offset = 0"/>
                <Param name="Type = &quot;UInt&quot;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ObjAddRef"/>
        <KeyWord name="ObjClone"/>
        <KeyWord name="Object"/>

        <!-- *gdb START CLASS: ObjectBase -->
        <KeyWord name="ObjectBase.contains" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether this object contains a particular value.
							; PARAMETERS:
							;  needle (I,REQ) - The value to search the object for.
							; RETURNS:        The first index where we found the value in question.
							;                 &quot;&quot; if we didn't find it at all.
							;---------">
                <Param name="needle" />
            </Overload>
        </KeyWord>
        <KeyWord name="ObjectBase.count" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Temporary override for built-in .count() function, until everywhere I use AHK
							;                 is updated to at least 1.1.29.00.
							; RETURNS:        Number of key/element pairs in the object
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="ObjectBase.mergeFromObject" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Recursively merge two objects together into a new object containing the data from both.
							; PARAMETERS:
							;  overrides (I,REQ) - The object to merge data from. The object in this parameter &quot;wins&quot; when
							;                      both this parameter and the instance of this class have the same
							;                      index/property - that is, we'll replace the value on the class instance
							;                      with the value from this parameter.
							;---------">
                <Param name="objectToAppend" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: ObjectBase -->

        <KeyWord name="ObjGetAddress"/>
        <KeyWord name="ObjGetCapacity"/>
        <KeyWord name="ObjHasKey"/>
        <KeyWord name="ObjInsert"/>
        <KeyWord name="ObjMaxIndex"/>
        <KeyWord name="ObjMinIndex"/>
        <KeyWord name="ObjNewEnum"/>
        <KeyWord name="ObjRelease"/>
        <KeyWord name="ObjRemove"/>
        <KeyWord name="ObjSetCapacity"/>
        <KeyWord name="Off"/>
        <KeyWord name="Ok"/>
        <KeyWord name="On"/>
        <KeyWord name="OnExit"/>
        <KeyWord name="OnMessage" func="yes">
            <Overload retVal="">
                <Param name="MsgNumber"/>
                <Param name="&quot;FunctionName&quot;"/>
                <Param name="MaxThreads"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OnExit" func="no">
            <Overload retVal="">
                <Param name="Label"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Or"/>
        <KeyWord name="OutputDebug" func="no">
            <Overload retVal="">
                <Param name="Text"/>
            </Overload>
        </KeyWord>
        <KeyWord name="OwnDialogs"/>
        <KeyWord name="Owner"/>
        <KeyWord name="Parse"/>
        <KeyWord name="Password"/>
        <KeyWord name="Pause" func="no">
            <Overload retVal="">
                <Param name="On|Off|Toggle"/>
                <Param name="OperateOnUnderlyingThread?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Pgdn"/>
        <KeyWord name="Pgup"/>

        <!-- *gdb START CLASS: PhoneLib -->
        <KeyWord name="PhoneLib.call" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Dials a given number using the Cisco WebDialer API.
							; PARAMETERS:
							;  formattedNum (I,REQ) - An optionally-formatted phone number to call.
							;  name         (I,OPT) - If this is given, we'll show a name above the formatted number.
							;---------">
                <Param name="formattedNum" />
                <Param name="name := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="PhoneLib.formatNumber" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Format a local (10-digit) phone number with parens/spaces/dash.
							; PARAMETERS:
							;  input (I,REQ) - The number for format.
							; RETURNS:        The formatted number, in format:
							;                  (XXX) XXX-XXXX
							;---------">
                <Param name="input" />
            </Overload>
        </KeyWord>
        <KeyWord name="PhoneLib.getRawNumber" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Parse and process the given phone number into a valid number to call from work.
							; PARAMETERS:
							;  input (I/O/IO,REQ/OPT) - The string
							; RETURNS:
							; SIDE EFFECTS:
							; NOTES:
							;---------">
                <Param name="input" />
            </Overload>
        </KeyWord>
        <KeyWord name="PhoneLib.isValidNumber" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether the given string is a valid phone number.
							; PARAMETERS:
							;  number (I,REQ) - The string to evaluate
							; RETURNS:        true/false - whether it's a valid phone number.
							;---------">
                <Param name="number" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: PhoneLib -->

        <KeyWord name="Pic"/>
        <KeyWord name="Picture"/>
        <KeyWord name="Pid"/>
        <KeyWord name="Pixel"/>
        <KeyWord name="PixelGetColor" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="X"/>
                <Param name="Y"/>
                <Param name="Alt|Slow|RGB"/>
            </Overload>
        </KeyWord>
        <KeyWord name="PixelSearch" func="no">
            <Overload retVal="">
                <Param name="OutputVarX"/>
                <Param name="OutputVarY"/>
                <Param name="X1"/>
                <Param name="Y1"/>
                <Param name="X2"/>
                <Param name="Y2"/>
                <Param name="ColorID"/>
                <Param name="Variation"/>
                <Param name="Fast|RGB"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Pos"/>
        <KeyWord name="PostMessage" func="no">
            <Overload retVal="">
                <Param name="Msg"/>
                <Param name="wParam"/>
                <Param name="lParam"/>
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Pow"/>
        <KeyWord name="PrintScreen"/>
        <KeyWord name="Priority"/>
        <KeyWord name="Process" func="no">
            <Overload retVal="">
                <Param name="Cmd"/>
                <Param name="PID-or-Name"/>
                <Param name="Param3"/>
            </Overload>
        </KeyWord>
        <KeyWord name="ProcessName"/>
        <KeyWord name="ProcessPath"/>
        <KeyWord name="ProgramFiles"/>
        <KeyWord name="Progress" func="no">
            <Overload retVal="">
                <Param name="Off"/>
            </Overload>
            <Overload retVal="">
                <Param name="ProgressParam1"/>
                <Param name="SubText"/>
                <Param name="MainText"/>
                <Param name="WinTitle"/>
                <Param name="FontName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Radio"/>
        <KeyWord name="RAlt"/>
        <KeyWord name="Random" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Min"/>
                <Param name="Max"/>
            </Overload>
            <Overload retVal="">
                <Param name=""/>
                <Param name="NewSeed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Range"/>
        <KeyWord name="Raw"/>
        <KeyWord name="RButton"/>
        <KeyWord name="RControl"/>
        <KeyWord name="RCtrl"/>
        <KeyWord name="Read"/>
        <KeyWord name="ReadOnly"/>
        <KeyWord name="RealTime"/>
        <KeyWord name="Redraw"/>
        <KeyWord name="RegDelete" func="no">
            <Overload retVal="">
                <Param name="RootKey"/>
                <Param name="SubKey"/>
                <Param name="ValueName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegEx"/>
        <KeyWord name="RegExMatch" func="yes">
            <Overload retVal="">
                <Param name="Haystack"/>
                <Param name="NeedleRegEx"/>
                <Param name="UnquotedOutputVar = &quot;&quot;"/>
                <Param name="StartingPos = 1"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegExReplace" func="yes">
            <Overload retVal="">
                <Param name="Haystack"/>
                <Param name="NeedleRegEx"/>
                <Param name="Replacement = &quot;&quot;"/>
                <Param name="OutputVarCount = &quot;&quot;"/>
                <Param name="Limit = -1"/>
                <Param name="StartingPos = 1"/>
            </Overload>
        </KeyWord>

        <KeyWord name="Region"/>
        <KeyWord name="RegisterCallback" func="yes">
            <Overload retVal="">
                <Param name="&quot;FunctionName&quot;"/>
                <Param name="Options = &quot;&quot;"/>
                <Param name="ParamCount = FormalCount"/>
                <Param name="EventInfo = Address"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegRead" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="RootKey"/>
                <Param name="SubKey"/>
                <Param name="ValueName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RegWrite" func="no">
            <Overload retVal="">
                <Param name="ValueType"/>
                <Param name="RootKey"/>
                <Param name="SubKey"/>
                <Param name="ValueName"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Reg_Binary"/>
        <KeyWord name="Reg_DWord"/>
        <KeyWord name="Reg_DWord_Big_Endian"/>
        <KeyWord name="Reg_Expand_SZ"/>
        <KeyWord name="Reg_Full_Resource_Descriptor"/>
        <KeyWord name="Reg_Link"/>
        <KeyWord name="Reg_Multi_SZ"/>
        <KeyWord name="Reg_QWord"/>
        <KeyWord name="Reg_Resource_List"/>
        <KeyWord name="Reg_Resource_Requirements_List"/>
        <KeyWord name="Reg_SZ"/>
        <KeyWord name="Relative"/>

        <!-- *gdb START CLASS: RelativeDate -->
        <KeyWord name="RelativeDate" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new representation of a date relative to right now.
							; PARAMETERS:
							;  relativeDate (I,OPT) - The relative date string to use to find the new date. If not provided,
							;                         we'll prompt the user for it.
							;---------">
                <Param name="relativeDate := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="RelativeDate.Instant" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The calculated instant, based on the relative date string passed to the constructor.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="RelativeDate.SendInFormat" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Send the relative date/time in a particular format.
							; PARAMETERS:
							;  format (I,REQ) - The format to send the date/time in, a la FormatTime().
							;---------">
                <Param name="format" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: RelativeDate -->


        <!-- *gdb START CLASS: RelativeDateTimeBase -->
        <KeyWord name="RelativeDateTimeBase.Instant" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The calculated instant, based on the relative date string passed to the constructor.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="RelativeDateTimeBase.SendInFormat" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Send the relative date/time in a particular format.
							; PARAMETERS:
							;  format (I,REQ) - The format to send the date/time in, a la FormatTime().
							;---------">
                <Param name="format" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: RelativeDateTimeBase -->

        <KeyWord name="Reload"/>
        <KeyWord name="Rename"/>
        <KeyWord name="Repeat"/>
        <KeyWord name="Report"/>
        <KeyWord name="Resize"/>
        <KeyWord name="Restore"/>
        <KeyWord name="Retry"/>
        <KeyWord name="Return" func="no">
            <Overload retVal="">
                <Param name="Expression"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RGB"/>
        <KeyWord name="Right"/>
        <KeyWord name="RightClick"/>
        <KeyWord name="RightClickDrag"/>
        <KeyWord name="Round" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
            <Overload retVal="">
                <Param name="Number"/>
                <Param name="N"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RShift"/>
        <KeyWord name="RTrim"/>
        <KeyWord name="Run" func="no">
            <Overload retVal="">
                <Param name="Target"/>
                <Param name="WorkingDir"/>
                <Param name="Max|Min|Hide|UserErrorLevel"/>
                <Param name="OutputVarPID"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RunAs" func="no">
            <Overload retVal="">
                <Param name="User"/>
                <Param name="Password"/>
                <Param name="Domain"/>
            </Overload>
        </KeyWord>

        <!-- *gdb START CLASS: RunLib -->
        <KeyWord name="RunLib.runAsUser" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run the given path as a non-elevated user.
							; PARAMETERS:
							;  path (I,REQ) - The path of the program to run.
							;  args (I,OPT) - Parameters to pass to the program.
							;---------">
                <Param name="path" />
                <Param name="args := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="RunLib.runCommand" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run a command with cmd.exe.
							; PARAMETERS:
							;  commandToRun     (I,REQ) - The command to run.
							;  workingDirectory (I,OPT) - The working directory to run the command in.
							;  stayOpen         (I,OPT) - Set to true if you want the window to stay open after the command has run.
							;---------">
                <Param name="commandToRun" />
                <Param name="workingDirectory := &quot;&quot;" />
                <Param name="stayOpen := false" />
            </Overload>
        </KeyWord>
        <KeyWord name="RunLib.runReturn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run the given command and return the output.
							; PARAMETERS:
							;  command (I,REQ) - Command to run.
							; RETURNS:        The output from the command, as passed to standard out.
							;---------">
                <Param name="command" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: RunLib -->

        <KeyWord name="RunWait" func="no">
            <Overload retVal="">
                <Param name="Target"/>
                <Param name="WorkingDir"/>
                <Param name="Max|Min|Hide|UserErrorLevel"/>
                <Param name="OutputVarPID"/>
            </Overload>
        </KeyWord>
        <KeyWord name="RWin"/>
        <KeyWord name="RWinDown"/>
        <KeyWord name="RWinUp"/>
        <KeyWord name="SB_SetIcon"/>
        <KeyWord name="SB_SetParts"/>
        <KeyWord name="SB_SetText"/>
        <KeyWord name="Screen"/>

        <!-- *gdb START CLASS: ScriptTrayInfo -->
        <KeyWord name="ScriptTrayInfo.Init" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new object representing the tray information for the script, including icons.
							; PARAMETERS:
							;  tooltipText   (I,REQ) - Text to show when the user hovers over the tray icon.
							;  normalIcon    (I,OPT) - The full path to the &quot;normal&quot; icon - this will be used when the script
							;                          is not suspended.
							;  suspendedIcon (I,OPT) - The full path to the suspended icon - this will be used when the script
							;                          is suspended using the common !#x hotkey (see CommonHotkeys).
							;---------">
                <Param name="tooltipText" />
                <Param name="normalIcon := &quot;&quot;" />
                <Param name="suspendedIcon := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="ScriptTrayInfo.setIconStates" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Directly set the array used to determine which tray icon to use based on
							;                 different global variable states.
							; PARAMETERS:
							;  states (I,REQ) - A tree-like associative array that maps the states of different variables to
							;                   the icons that we should use for the script. Format:
							;                   	states[&quot;varName&quot;, varState] := iconPath
							;                   See getIconForCurrentState() for a more in-depth explanation.
							;---------">
                <Param name="states" />
            </Overload>
        </KeyWord>
        <KeyWord name="ScriptTrayInfo.updateTrayIcon" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine the icon that should be used for the script (based on the variables
							;                 defined in the _iconStates array) and apply it.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: ScriptTrayInfo -->

        <KeyWord name="ScrollLock"/>

        <!-- *gdb START CLASS: SearchLib -->
        <KeyWord name="SearchLib.baseURL" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Search for a term using the given base URL.
							; PARAMETERS:
							;  searchBaseURL (I,REQ) - The &quot;base&quot; URL (with %s in place of the search term) to search with.
							;  searchTerm    (I,REQ) - The term to search for.
							;---------">
                <Param name="searchBaseURL" />
                <Param name="searchTerm" />
            </Overload>
        </KeyWord>
        <KeyWord name="SearchLib.codeSearch" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Search for the given term/type/app with CodeSearch.
							; PARAMETERS:
							;  searchTerm (I,REQ) - Text to search for.
							;  searchType (I,REQ) - Type of search, from: Server, Client, Records, ProgPoint
							;  appKey     (I,OPT) - App key (goes on the end of CS_APP_ID_ for a private value) to search only
							;                       within that app's code. Defaults to all apps (no filter).
							;---------">
                <Param name="searchTerm" />
                <Param name="searchType" />
                <Param name="appKey := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="SearchLib.epicWiki" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Search the Epic wiki for the given term.
							; PARAMETERS:
							;  searchTerm (I,REQ) - Text to search for.
							;  category   (I,OPT) - Category to restrict search results to within the wiki.
							;---------">
                <Param name="searchTerm" />
                <Param name="category := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="SearchLib.everything" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run a search with Everything.
							; PARAMETERS:
							;  searchTerm (I,REQ) - Text to search for.
							;---------">
                <Param name="searchTerm" />
            </Overload>
        </KeyWord>
        <KeyWord name="SearchLib.grepWin" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run a search with grepWin in the given path.
							; PARAMETERS:
							;  searchTerm   (I,REQ) - Text to search for.
							;  pathToSearch (I,REQ) - Where to search files for the given term.
							;---------">
                <Param name="searchTerm" />
                <Param name="pathToSearch" />
            </Overload>
        </KeyWord>
        <KeyWord name="SearchLib.guru" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Search Guru for the given text.
							; PARAMETERS:
							;  searchTerm (I,REQ) - Text to search for.
							;---------">
                <Param name="searchTerm" />
            </Overload>
        </KeyWord>
        <KeyWord name="SearchLib.selectedTextPrompt" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Run a generic search with the selected text, prompting the user for what kind
							;                 of search it should be.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: SearchLib -->

        <KeyWord name="Seconds"/>
        <KeyWord name="Section"/>

        <!-- *gdb START CLASS: SelectLib -->
        <KeyWord name="SelectLib.getCleanFirstLine" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the first line of the selected text, cleaned.
							; RETURNS:        The cleaned first line of the selected text.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="SelectLib.getFirstLine" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the first line of the selected text.
							; RETURNS:        The portion of the selected text before the first newline.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="SelectLib.getText" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the selected text using the clipboard.
							; RETURNS:        The selected text.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="SelectLib.selectCurrentLine" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Select the current line of text.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="SelectLib.selectTextWithinSelection" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Select the given text, within the currently selected block of text.
							; PARAMETERS:
							;  needle (I,REQ) - The text to select.
							;---------">
                <Param name="needle" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: SelectLib -->


        <!-- *gdb START CLASS: Selector -->
        <KeyWord name="Selector" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Creates a new instance of the Selector class.
							; PARAMETERS:
							;  filePath (I,REQ) - The Selector file (.tls) where the choices that will be selected from will be
							;                     read from. See above for format.
							; RETURNS:        A new Selector object.
							;---------">
                <Param name="filePath" />
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.AddOverrideFields" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Add additional override fields to the popup shown to the user, and return whatever data
							;                 they add (or is defaulted in) in the final return array.
							; PARAMETERS:
							;  fieldsToAdd (I,REQ) - Numerically-indexed array of field names (treated the same as column names from choices) to add.
							; NOTES:          This should be called after creating a new Selector object, but before calling .selectGui().
							;                 Default override values for these fields (if desired) can be set using the .SetDefaultOverrides() function.
							;---------">
                <Param name="fieldsToAdd" />
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.dataTL" func="yes">
            <Overload retVal="[Property]" descr="
							;---------
							; DESCRIPTION:    The TableList instance that holds all data read from the file, available so
							;                 that callers can apply filtering if needed. See TableList for available
							;                 filtering functions.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.OverrideFieldsOff" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn off the override fields in the popup.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.select" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Helper function that calls either .selectGui() or .selectChoice() based on whether the
							;                 given choice is blank.
							; PARAMETERS:
							;  choiceString (I,OPT) - The string to try and match against the given choices. If this is blank, we'll
							;                         call .selectGui() to show a popup to the user where they pick their choice and
							;                         enter any additional override information. If this is not blank, we'll match
							;                         it against the index or abbreviation of the choices and return the results.
							;  returnColumn (I,OPT) - If this parameter is given, only the data under the column with this name will
							;                         be returned.
							; RETURNS:        An array of data for the choice matching the given string. If the returnColumn
							;                 parameter was specified, only the subscript matching that name will be returned.
							;---------">
                <Param name="choiceString := &quot;&quot;" />
                <Param name="returnColumn := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.selectChoice" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Programmatically select a choice from those we've prepared.
							; PARAMETERS:
							;  choiceString (I,REQ) - The string to try and match against the given choices. We will match this string
							;                         against the index or abbreviation of the choice.
							;  returnColumn (I,OPT) - If this parameter is given, only the data under the column with this name will
							;                         be returned.
							; RETURNS:        An array of data for the choice matching the given string. If the returnColumn parameter
							;                 was specified, only the subscript matching that name will be returned.
							;---------">
                <Param name="choiceString" />
                <Param name="returnColumn := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.selectGui" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show a popup to the user so they can select one of the choices we've prepared
							;                 and enter any additional override information.
							; PARAMETERS:
							;  returnColumn (I,OPT) - If this parameter is given, only the data under the column with this
							;                         name will be returned.
							; RETURNS:        An array of data as chosen/overridden by the user. If the returnColumn
							;                 parameter was specified, only the subscript matching that name will be
							;                 returned.
							;---------">
                <Param name="returnColumn := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.SetDefaultOverrides" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Set the default values for the override fields in the popup.
							; PARAMETERS:
							;  defaultOverrides (I,REQ) - Associative array fo default overrides, format:
							;                              {columnLabel: value}
							; RETURNS:        this
							;---------">
                <Param name="defaultOverrides" />
            </Overload>
        </KeyWord>
        <KeyWord name="Selector.SetTitle" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Set the popup's title.
							; PARAMETERS:
							;  title (I,REQ) - The title to use.
							; RETURNS:        this
							;---------">
                <Param name="title" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: Selector -->

        <KeyWord name="Send" func="no">
            <Overload retVal="">
                <Param name="Keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendEvent" func="no">
            <Overload retVal="">
                <Param name="Keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendInput" func="no">
            <Overload retVal="">
                <Param name="Keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendLevel" func="no">
            <Overload retVal="">
                <Param name="Level"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendMessage" func="no">
            <Overload retVal="">
                <Param name="Msg"/>
                <Param name="wParam"/>
                <Param name="lParam"/>
                <Param name="Control"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendMode" func="no">
            <Overload retVal="">
                <Param name="Input|Play|Event|InputThenPlay"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendPlay" func="no">
            <Overload retVal="">
                <Param name="Keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SendRaw" func="no">
            <Overload retVal="">
                <Param name="Keys"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Serial"/>
        <KeyWord name="SetBatchLines" func="no">
            <Overload retVal="">
                <Param name="ms"/>
            </Overload>
            <Overload retVal="">
                <Param name="LineCount"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetCapslockState" func="no">
            <Overload retVal="">
                <Param name="State"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetControlDelay" func="no">
            <Overload retVal="">
                <Param name="Delay"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetDefaultMouseSpeed" func="no">
            <Overload retVal="">
                <Param name="Speed"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetEnv" func="no">
            <Overload retVal="">
                <Param name="Var"/>
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetFormat" func="no">
            <Overload retVal="">
                <Param name="NumberType"/>
                <Param name="Format"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetKeyDelay" func="no">
            <Overload retVal="">
                <Param name="Delay"/>
                <Param name="PressDuration"/>
                <Param name="Play"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetLabel"/>
        <KeyWord name="SetMouseDelay" func="no">
            <Overload retVal="">
                <Param name="Delay"/>
                <Param name="Play"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetNumlockState" func="no">
            <Overload retVal="">
                <Param name="State"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetRegView" func="no">
            <Overload retVal="">
                <Param name="RegView"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetScrollLockState" func="no">
            <Overload retVal="">
                <Param name="State"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetStoreCapslockMode" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTimer" func="no">
            <Overload retVal="">
                <Param name="Label"/>
                <Param name="Period|On|Off"/>
                <Param name="Priority"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetTitleMatchMode" func="no">
            <Overload retVal="">
                <Param name="MatchMode"/>
            </Overload>
            <Overload retVal="">
                <Param name="Fast|Slow"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetWinDelay" func="no">
            <Overload retVal="">
                <Param name="Delay"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SetWorkingDir" func="no">
            <Overload retVal="">
                <Param name="DirName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Shift"/>
        <KeyWord name="ShiftAltTab"/>
        <KeyWord name="ShiftDown"/>
        <KeyWord name="shiftup"/>
        <KeyWord name="Show"/>
        <KeyWord name="Shutdown" func="no">
            <Overload retVal="">
                <Param name="Code"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Sin" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Single"/>
        <KeyWord name="Sleep" func="no">
            <Overload retVal="">
                <Param name="Delay"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Slider"/>
        <KeyWord name="Sort" func="no">
            <Overload retVal="">
                <Param name="VarName"/>
                <Param name="Options"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SortDesc"/>
        <KeyWord name="SoundBeep" func="no">
            <Overload retVal="">
                <Param name="Frequency"/>
                <Param name="Duration"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SoundGet" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="ComponentType"/>
                <Param name="ControlType"/>
                <Param name="DeviceNumber"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SoundGetWaveVolume" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="DeviceNumber"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SoundPlay" func="no">
            <Overload retVal="">
                <Param name="Filename"/>
                <Param name="wait"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SoundSet" func="no">
            <Overload retVal="">
                <Param name="NewSetting"/>
                <Param name="ComponentType"/>
                <Param name="ControlType"/>
                <Param name="DeviceNumber"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SoundSetWaveVolume" func="no">
            <Overload retVal="">
                <Param name="Percent"/>
                <Param name="DeviceNumber"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Space"/>
        <KeyWord name="SplashImage" func="no">
            <Overload retVal="">
                <Param name="Off"/>
            </Overload>
            <Overload retVal="">
                <Param name="ImageFile"/>
                <Param name="Options"/>
                <Param name="SubText"/>
                <Param name="MainText"/>
                <Param name="WinTitle"/>
                <Param name="FontName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SplashTextOff"/>
        <KeyWord name="SplashTextOn" func="no">
            <Overload retVal="">
                <Param name="Width"/>
                <Param name="Height"/>
                <Param name="Title"/>
                <Param name="Text"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SplitPath" func="no">
            <Overload retVal="">
                <Param name="InputVar"/>
                <Param name="OutFileName"/>
                <Param name="OutDir"/>
                <Param name="OutExtension"/>
                <Param name="OutNameNoExt"/>
                <Param name="OutDrive"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Sqrt" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Standard"/>
        <KeyWord name="Static"/>
        <KeyWord name="Status"/>
        <KeyWord name="StatusBar"/>
        <KeyWord name="StatusBarGetText" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Part#"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StatusBarWait" func="no">
            <Overload retVal="">
                <Param name="BarText"/>
                <Param name="Seconds"/>
                <Param name="Part#"/>
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StatusCD"/>
        <KeyWord name="StrGet" func="yes">
            <Overload retVal="">
                <Param name="Address"/>
                <Param name="Length"/>
                <Param name="Encoding = None"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Strike"/>

        <!-- *gdb START CLASS: StringBase -->
        <KeyWord name="StringBase.allBetweenStrings" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the portion of the string that is between the two provided strings. This
							;                 is the greedy function - it will go from the first instance of startString
							;                 to the LAST instance of endString.
							; PARAMETERS:
							;  startString (I,REQ) - String to start matching at
							;  endString   (I,REQ) - String to finish matching at
							; RETURNS:        Requested chunk of this string.
							;---------">
                <Param name="startString" />
                <Param name="endString" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.appendPiece" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Append a piece to this string with a delimiter, but only add a delimiter if it's needed.
							; PARAMETERS:
							;  pieceToAdd (I,REQ) - Piece to add to the string
							;  delimiter  (I,OPT) - Delimiter to add before the new piece (if applicable). Defaults to a comma (,).
							; RETURNS:        The updated string.
							;---------">
                <Param name="pieceToAdd" />
                <Param name="delimiter := &quot;,&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.beforeString" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the portion of this string before/after the given string.
							; PARAMETERS:
							;  checkString   (I,REQ) - The string to return before/after. Will not be included in the result (unless there are multiple)
							;  searchFromEnd (I,OPT) - Set to True to start searching from the end of the string instead of the start.
							; RETURNS:        The requested portion of this string.
							;---------">
                <Param name="checkString" />
                <Param name="searchFromEnd := false" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.clean" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Remove certain characters (and optionally, additional passed-in strings) from
							;                 the start and end of this string, and replace certain odd characters with
							;                 better equivalents.
							; PARAMETERS:
							;  additionalStringsToRemove (I,OPT) - Pass in an array of strings to have them also removed
							;                                      from the start and end of this string.
							; RETURNS:        The updated string
							; NOTES:          Order doesn't matter - we keep cleaning until we don't find any of the
							;                 provided strings at the start or end of the output.
							;---------">
                <Param name="additionalStringsToRemove := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.contains" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for InStr() - check if a string contains a search string.
							; PARAMETERS:
							;  needle        (I,REQ) - String to search for
							;  searchFromEnd (I,OPT) - Whether to reverse search (start from end and return the position of the last match)
							; RETURNS:        The position of the match we found (first or last, depending on searchFromEnd parameter)
							;                 0 if nothing found
							;---------">
                <Param name="needle" />
                <Param name="searchFromEnd := false" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.containsAnyOf" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .contains() which takes an array of search strings.
							; PARAMETERS:
							;  needlesAry    (I,REQ) - The array/object of strings to search for (we'll search for the values, not the keys/indices)
							;  matchedNeedle (O,OPT) - The needle that we matched
							; RETURNS:        The position of the first occurrence of any needle.
							;---------">
                <Param name="needlesAry" />
                <Param name="ByRef matchedNeedle := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.containsRegEx" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for RegExMatch() - check if a string contains a search regex.
							; PARAMETERS:
							;  needleRegEx (I,REQ) - RegEx to search for
							;  outputVar   (O,OPT) - Output variable - can be the matched string, position+length, or a
							;                        match object (depending on the mode specified in needleRegEx, see
							;                        RegExMatch() for details).
							; RETURNS:        The position of the first match, 0 if nothing found.
							; SIDE EFFECTS:
							; NOTES:
							;---------">
                <Param name="needleRegEx" />
                <Param name="ByRef outputVar := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.countMatches" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Count how many times a search string occurs in this string.
							; PARAMETERS:
							;  needle (I,REQ) - The search string
							; RETURNS:        How many times the search string appears.
							;---------">
                <Param name="needle" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.firstBetweenStrings" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the portion of the string that is between the two provided strings. This
							;                 is the non-greedy function - it will go from the first instance of startString
							;                 to the first instance of endString.
							; PARAMETERS:
							;  startString (I,REQ) - String to start matching at
							;  endString   (I,REQ) - String to finish matching at
							; RETURNS:        Requested chunk of this string.
							;---------">
                <Param name="startString" />
                <Param name="endString" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.firstLine" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the first line of this string.
							; RETURNS:        The first line of this string (everything up to the first newline)
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.isAlpha" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper functions for whether a string is alphabetic, numeric, or alphanumeric.
							; RETURNS:        True if the string is, False otherwise.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.length" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for StrLen().
							; RETURNS:        Length of string
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.prePadToLength" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Left-pad the string to the specified length.
							; PARAMETERS:
							;  numChars (I,REQ) - How many characters the final string should be (at minimum).
							;  withChar (I,OPT) - The character to use to do the padding. Defaults to space ( ).
							; RETURNS:        The string, padded out to the specified length.
							;---------">
                <Param name="numChars" />
                <Param name="withChar := &quot; &quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.prependIfMissing" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Add a string to the beginning/end of this string, but only if that string is
							;                 not already in place.
							; PARAMETERS:
							;  strToAdd (I,REQ) - String to add at the beginning/end.
							; RETURNS:        Updated string.
							;---------">
                <Param name="strToAdd" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.remove" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Remove all instances of the provided string from this string.
							; PARAMETERS:
							;  needle (I,REQ) - Text to remove all instances of.
							; RETURNS:        The updated string
							;---------">
                <Param name="needle" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.removeFromStart" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Remove a string (if it exists) from the start/end of this string.
							; PARAMETERS:
							;  toRemove (I,REQ) - The string to remove from the start or end of this string.
							; RETURNS:        The updated string, after removing toRemove.
							;---------">
                <Param name="toRemove" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.removeRegEx" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Remove all matches for the provided RegEx from this string.
							; PARAMETERS:
							;  needleRegEx (I,REQ) - RegEx to match on.
							; RETURNS:        The updated string
							;---------">
                <Param name="needleRegEx" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.replace" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrappers for StrReplace - replace all (or one) instance(s) of the provided
							;                 string, with the replacement text.
							; PARAMETERS:
							;  needle      (I,REQ) - String to replace
							;  replaceWith (I,REQ) - String to replace with
							; RETURNS:        The updated string
							; NOTES:          If you just want to remove all instances of a string, use .remove() instead.
							;---------">
                <Param name="needle" />
                <Param name="replaceWith" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.replaceRegEx" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for RegExReplace - replace all matches for the provided RegEx, with
							;                 the provided replacement text.
							; PARAMETERS:
							;  needleRegEx (I,REQ) - RegEx to match on.
							;  replaceWith (I,REQ) - Text to replace matches with.
							; RETURNS:        The updated string
							; NOTES:          If you just want to remove all matches, use .removeRegEx() intead.
							;---------">
                <Param name="needleRegEx" />
                <Param name="replaceWith" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.replaceTag" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Replace a tag (&quot;<TAG_NAME>&quot;) in this string with the provided replacement.
							; PARAMETERS:
							;  tagName     (I,REQ) - The name of the tag to replace (no angle brackets)
							;  replacement (I,REQ) - The text to replace all instances of the tag with.
							; RETURNS:        The updated string.
							;---------">
                <Param name="tagName" />
                <Param name="replacement" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.replaceTags" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Replace multiple tags with corresponding replacement texts (see .replaceTag()).
							; PARAMETERS:
							;  tagsAry (I,REQ) - Array of tag names and replacements. Format:
							;                       tagsAry[&quot;TAG_NAME&quot;] := REPLACEMENT_TEXT
							; RETURNS:        The updated string.
							;---------">
                <Param name="tagsAry" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.slice" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Return a chunk of this string, given starting and ending positions.
							; PARAMETERS:
							;  startPos  (I,REQ) - Starting position
							;  stopAtPos (I,REQ) - Ending position - return up to here, non-inclusive.
							; RETURNS:        Chunk of this string specified.
							;---------">
                <Param name="startPos" />
                <Param name="stopAtPos" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.split" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    A wrapper for StrSplit() that returns an actual array (not an object).
							; PARAMETERS:
							;  delimiters             (I,OPT) - Delimiter (or array of delimiters) to split on
							;  surroundingCharsToDrop (I,OPT) - Characters to drop from around each piece
							; RETURNS:        Array of split-up string
							;---------">
                <Param name="delimiters := &quot;&quot;" />
                <Param name="surroundingCharsToDrop := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.startsWith" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether this string starts/ends with the provided string.
							; PARAMETERS:
							;  checkString (I,REQ) - The string to check whether this string starts/ends with.
							; RETURNS:        True if it does, False otherwise.
							;---------">
                <Param name="checkString" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.startsWithAnyOf" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .startsWith() that takes an array of strings to check.
							; PARAMETERS:
							;  needlesAry    (I,REQ) - Array of strings to check.
							;  matchedNeedle (O,OPT) - The first matching entry we found in the needlesAry.
							; RETURNS:        True if this string starts with any of the provided check strings, False otherwise.
							;---------">
                <Param name="needlesAry" />
                <Param name="ByRef matchedNeedle := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.sub" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for SubStr() - returns a chunk of this string.
							; PARAMETERS:
							;  startPos (I,REQ) - Position to start at (first character is position 1). Can be negative to count from end of string.
							;  length   (I,OPT) - Number of characters to include. If left blank, we'll return the entire rest of the string.
							; RETURNS:        The chunk of this string specified.
							;---------">
                <Param name="startPos" />
                <Param name="length := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringBase.withoutWhitespace" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the string, with no leading/trailing whitespace.
							; RETURNS:        The string without whitespace.
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: StringBase -->

        <KeyWord name="StringCaseSense" func="no">
            <Overload retVal="">
                <Param name="On|Off|Locale"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringGetPos" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="SearchText"/>
                <Param name="L#|R#"/>
                <Param name="Offset"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringLeft" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="Count"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringLen" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
            </Overload>
        </KeyWord>

        <!-- *gdb START CLASS: StringLib -->
        <KeyWord name="StringLib.countLeadingSpaces" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine how many spaces there are at the beginning of a string.
							; PARAMETERS:
							;  line (I,REQ) - The line to count spaces for.
							; RETURNS:        The number of spaces at the beginning of the line.
							;---------">
                <Param name="line" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringLib.decodeFromURL" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Decode the given URL-safe text to bring it back to normal.
							; PARAMETERS:
							;  textToDecode (I,REQ) - The text to decode.
							; RETURNS:        The decoded text.
							;---------">
                <Param name="textToDecode" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringLib.duplicate" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Duplicate the given string, the given number of times. For example,
							;                 StringLib.duplicate(&quot;abc&quot;, 3) will produce &quot;abcabcabc&quot;.
							; PARAMETERS:
							;  stringToDup (I,REQ) - The string to duplicate
							;  numTimes    (I,REQ) - How many times to duplicate the string. 1 returns the same string.
							; RETURNS:        A string with the given number of duplicates.
							;---------">
                <Param name="stringToDup" />
                <Param name="numTimes" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringLib.encodeForURL" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Encode the given text to be URL-safe.
							; PARAMETERS:
							;  textToEncode (I,REQ) - The text to encode
							; RETURNS:        The encoded text.
							;---------">
                <Param name="textToEncode" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringLib.escapeCharUsingChar" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Escape all instances of a character in the given string, with a specific character.
							; PARAMETERS:
							;  inputString  (I,REQ) - The string to escape the character within.
							;  charToEscape (I,REQ) - The character to escape
							;  escapeChar   (I,OPT) - The escape character to use.
							; RETURNS:        The string with all instances of the character escaped.
							;---------">
                <Param name="inputString" />
                <Param name="charToEscape" />
                <Param name="escapeChar := &quot;\&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="StringLib.getSpaces" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the specified number of spaces/tabs/dots.
							; PARAMETERS:
							;  numToGet (I,REQ) - How many of the relevant character to return.
							; RETURNS:        As many spaces/dots as requested.
							;---------">
                <Param name="numToGet" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: StringLib -->

        <KeyWord name="StringLower" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="T"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringMid" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="StartChar"/>
                <Param name="Count"/>
                <Param name="L"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringReplace" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="SearchText"/>
                <Param name="ReplaceText"/>
                <Param name="ReplaceAll?"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringRight" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="Count"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringSplit" func="no">
            <Overload retVal="">
                <Param name="OutputArray"/>
                <Param name="InputVar"/>
                <Param name="Delimiters"/>
                <Param name="OmitChars"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringTrimLeft" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="Count"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringTrimRight" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="Count"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StringUpper" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="InputVar"/>
                <Param name="T"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StrLen" func="yes">
            <Overload retVal="">
                <Param name="String"/>
            </Overload>
        </KeyWord>
        <KeyWord name="StrPut" func="yes">
            <Overload retVal="">
                <Param name="String"/>
                <Param name="Encoding = None"/>
            </Overload>
            <Overload retVal="">
                <Param name="String"/>
                <Param name="Address"/>
                <Param name="Length"/>
                <Param name="Encoding = None"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Style"/>
        <KeyWord name="Submit"/>
        <KeyWord name="SubStr" func="yes">
            <Overload retVal="">
                <Param name="String"/>
                <Param name="StartingPos"/>
            </Overload>
            <Overload retVal="">
                <Param name="String"/>
                <Param name="StartingPos"/>
                <Param name="Length"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Suspend" func="no">
            <Overload retVal="">
                <Param name="Mode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SysGet" func="no">
            <Overload retVal="">
                <Param name="OutputVar"/>
                <Param name="Sub-command"/>
                <Param name="Param3"/>
            </Overload>
        </KeyWord>
        <KeyWord name="SysMenu"/>
        <KeyWord name="Tab"/>
        <KeyWord name="Tab2"/>
        <KeyWord name="Tabstop"/>
        <KeyWord name="Tan" func="yes">
            <Overload retVal="">
                <Param name="Number"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Text"/>
        <KeyWord name="Theme"/>
        <KeyWord name="This"/>
        <KeyWord name="Thread"/>
        <KeyWord name="Tile"/>
        <KeyWord name="Time"/>
        <KeyWord name="Tip"/>

        <!-- *gdb START CLASS: Toast -->
        <KeyWord name="Toast" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Create a new Toast object.
							; PARAMETERS:
							;  toastText      (I,OPT) - The text to show in the toast.
							;  styleOverrides (I,OPT) - Any style overrides that you'd like to make. Defaults can be
							;                           found in .getStyles().
							;---------">
                <Param name="toastText := &quot;&quot;" />
                <Param name="styleOverrides := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.blockingOn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn blocking on/off
							; RETURNS:        this
							; NOTES:          Blocking means that we'll sleep the calling script while the toast is showing
							;                 on a timer, rather than setting a timer and allowing execution to continue.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.close" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Hide and destroy the GUI for this toast.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.hide" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Fade the toast out, but don't destroy it (use .close() instead if you're
							;                 finished with the toast).
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.persistentOn" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Turn persistence on/off
							; RETURNS:        this
							; NOTES:          Persistence means that the toast will be hidden (rather than destroyed) when we
							;                 finish showing it on a timer.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.setText" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Change the text for the toast.
							; PARAMETERS:
							;  toastText (I,REQ) - The text to show in the toast.
							; RETURNS:        this
							; NOTES:          Will try to maintain the same position, but toast size will expand to fit text.
							;---------">
                <Param name="toastText" />
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.show" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show this toast indefinitely, until it is hidden or closed.
							; PARAMETERS:
							;  x (I,OPT) - The x coordinate to show the toast at (or special value from VisualWindow.X_*).
							;              Defaults to previous position (if set), then right edge of screen.
							;  y (I,OPT) - The y coordinate to show the toast at (or special value from VisualWindow.Y_*).
							;              Defaults to previous position (if set), then bottom edge of screen.
							; RETURNS:        this
							;---------">
                <Param name="x := &quot;&quot;" />
                <Param name="y := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.showForSeconds" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Show the toast for a certain number of seconds, then hide or destroy it (based
							;                 on whether it's marked as persistent).
							; PARAMETERS:
							;  numSeconds (I,REQ) - The number of seconds to show the toast for.
							;  x          (I,OPT) - The x coordinate to show the toast at (or special value from VisualWindow.X_*).
							;                       Defaults to previous position (if set), then right edge of screen.
							;  y          (I,OPT) - The y coordinate to show the toast at (or special value from VisualWindow.Y_*).
							;                       Defaults to previous position (if set), then bottom edge of screen.
							; RETURNS:        this
							;---------">
                <Param name="numSeconds" />
                <Param name="x := &quot;&quot;" />
                <Param name="y := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.showLong" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .showForSeconds for a &quot;long&quot; toast (shown for 5 seconds) in
							;                 the bottom-right corner of the screen.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.showMedium" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .showForSeconds for a &quot;medium&quot; toast (shown for 2 seconds) in
							;                 the bottom-right corner of the screen.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="Toast.showShort" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Wrapper for .showForSeconds for a &quot;short&quot; toast (shown for 1 second) in
							;                 the bottom-right corner of the screen.
							; RETURNS:        this
							;---------">
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: Toast -->

        <KeyWord name="ToCodePage"/>
        <KeyWord name="ToggleCheck"/>
        <KeyWord name="ToggleEnable"/>
        <KeyWord name="ToolTip"/>
        <KeyWord name="ToolWindow"/>
        <KeyWord name="Top"/>
        <KeyWord name="Topmost"/>
        <KeyWord name="TransColor"/>
        <KeyWord name="Transform"/>
        <KeyWord name="Transparent"/>
        <KeyWord name="Tray"/>
        <KeyWord name="TrayTip"/>
        <KeyWord name="Treeview"/>
        <KeyWord name="Trim"/>
        <KeyWord name="True"/>
        <KeyWord name="TV_Add"/>
        <KeyWord name="TV_Delete"/>
        <KeyWord name="TV_Get"/>
        <KeyWord name="TV_GetChild"/>
        <KeyWord name="TV_GetCount"/>
        <KeyWord name="TV_GetNext"/>
        <KeyWord name="TV_GetParent"/>
        <KeyWord name="TV_GetPrev"/>
        <KeyWord name="TV_GetSelection"/>
        <KeyWord name="TV_GetText"/>
        <KeyWord name="TV_Modify"/>
        <KeyWord name="TV_Setimagelist"/>
        <KeyWord name="Type"/>
        <KeyWord name="Uncheck"/>
        <KeyWord name="Underline"/>
        <KeyWord name="Unicode"/>
        <KeyWord name="Unlock"/>
        <KeyWord name="Up"/>
        <KeyWord name="UpDown"/>
        <KeyWord name="Upper"/>
        <KeyWord name="Uppercase"/>
        <KeyWord name="UrlDownloadToFile"/>
        <KeyWord name="UseErrorLevel"/>
        <KeyWord name="VarSetCapacity" func="yes">
            <Overload retVal="">
                <Param name="UnquotedVarName"/>
            </Overload>
            <Overload retVal="">
                <Param name="UnquotedVarName"/>
                <Param name="RequestedCapacity"/>
                <Param name="FillByte"/>
            </Overload>
        </KeyWord>
        <KeyWord name="Vis"/>
        <KeyWord name="VisFirst"/>
        <KeyWord name="Visible"/>
        <KeyWord name="Volume_Down"/>
        <KeyWord name="Volume_Mute"/>
        <KeyWord name="volume_Up"/>
        <KeyWord name="VScroll"/>
        <KeyWord name="WaitClose"/>
        <KeyWord name="WantCtrlA"/>
        <KeyWord name="WantF2"/>
        <KeyWord name="WantReturn"/>
        <KeyWord name="WantTab"/>
        <KeyWord name="WheelDown"/>
        <KeyWord name="WheelLeft"/>
        <KeyWord name="WheelRight"/>
        <KeyWord name="WheelUp"/>
        <KeyWord name="While"/>
        <KeyWord name="WinActivate"/>
        <KeyWord name="WinActivateBottom"/>
        <KeyWord name="WinActive" func="yes">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WinClose"/>

        <!-- *gdb START CLASS: WindowActions -->
        <KeyWord name="WindowActions.activateWindow" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Activate and show a window, respecting any custom overrides for the identified
							;                 window.
							; PARAMETERS:
							;  titleString (I,REQ) - A title string identifying the window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.activateWindowByName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Activate and show a window, respecting any custom overrides for the identified
							;                 window.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to activate, as defined in windows.tl.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.closeWindow" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Close a window, respecting any custom overrides for the identified window.
							; PARAMETERS:
							;  titleString (I,REQ) - A title string representing the window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.closeWindowByName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Close a window, respecting any custom overrides for the identified window.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to activate, as defined in windows.tl.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.deleteWord" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Delete a single word before the cursor within a particular window, respecting
							;                 any custom overrides for the identified window.
							; PARAMETERS:
							;  titleString (I,REQ) - A title string representing the window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.deleteWordByName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Delete a single word before the cursor within a particular window, respecting
							;                 any custom overrides for the identified window.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to activate, as defined in windows.tl.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.escAction" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Respond to the escape key within a particular window, respecting any custom
							;                 overrides for the identified window.
							; PARAMETERS:
							;  titleString (I,REQ) - A title string representing the window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.escActionByName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Respond to the escape key within a particular window, respecting any custom
							;                 overrides for the identified window.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to activate, as defined in windows.tl.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.Init" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Initialize this class with window identifiers and actions.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.minimizeWindow" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Minimize a window, respecting any custom overrides for the identified window.
							; PARAMETERS:
							;  titleString (I,REQ) - A title string representing the window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.minimizeWindowByName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Minimize a window, respecting any custom overrides for the identified window.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to activate, as defined in windows.tl.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.selectAll" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Select all within a particular window, respecting any custom overrides for the
							;                 identified window.
							; PARAMETERS:
							;  titleString (I,REQ) - A title string representing the window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowActions.selectAllByName" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Select all within a particular window, respecting any custom overrides for the
							;                 identified window.
							; PARAMETERS:
							;  name (I,REQ) - The name of the window to activate, as defined in windows.tl.
							;---------">
                <Param name="name" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: WindowActions -->


        <!-- *gdb START CLASS: WindowLib -->
        <KeyWord name="WindowLib.buildTitleString" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Build a title string that can be used to identify a window based on the given
							;                 parts, for use with WinActivate and the like.
							; PARAMETERS:
							;  exeName  (I,OPT) - Executable name, will be paired with ahk_exe
							;  winClass (I,OPT) - Window class, will be paired with ahk_class
							;  winTitle (I,OPT) - Text that's part of the window title
							; RETURNS:        Title string including all of the given criteria
							;---------">
                <Param name="exeName := &quot;&quot;" />
                <Param name="winClass := &quot;&quot;" />
                <Param name="winTitle := &quot;&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.center" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Visually center the given window on its current monitor.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.fakeMaximize" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Resize a window to take up the full size of the monitor, without actually
							;                 maximizing that window.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.getIdTitleString" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    For the window identified by the given title string, generate a title string
							;                 that's guaranteed to match only that window (based on its window ID).
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        A title string that uniquely (using ahk_id) identifies only your chosen window.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.getIdTitleStringUnderMouse" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get an ID-based title string to identify the window under the mouse with.
							; RETURNS:        title string (that uses ahk_id) identifying the window under the mouse.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.getMonitorWorkArea" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Get the dimensions of the work area of the monitor &quot;closest&quot; (according to
							;                 Windows) to the given window.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        Associative array of position/size information for the working area of the
							;                 monitor that the window is &quot;closest&quot; to. Format:
							;                    bounds[&quot;LEFT&quot;]   = X coordinate of monitor's (working area's) left bound
							;                          [&quot;RIGHT&quot;]  = X coordinate of monitor's (working area's) right bound
							;                          [&quot;TOP&quot;]    = Y coordinate of monitor's (working area's) top bound
							;                          [&quot;BOTTOM&quot;] = Y coordinate of monitor's (working area's) bottom bound
							;                          [&quot;WIDTH&quot;]  = width of the monitor's work area
							;                          [&quot;HEIGHT&quot;] = height of the monitor's work area
							; NOTES:          This working area excludes things like the taskbar - it's the full space that a
							;                 window can occupy.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.getMouseMonitorBounds" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Find the monitor that the mouse is on and return its bounds.
							; RETURNS:        The bounds of the monitor that the mouse is on.
							; NOTES:          If the mouse is on the border between monitors, we will return the bottom-right most monitor.
							;---------">
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.hasCaption" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether a window has the &quot;caption&quot; style (with a title bar and borders).
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true/false, whether the window has the caption style.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.hasStyle" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Check whether a window has a particular style or extended style
							; PARAMETERS:
							;  style       (I,REQ) - The style/extended style to check for.
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true if the window has the given style/extended style, false otherwise.
							;---------">
                <Param name="style" />
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.isAlwaysOnTop" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether a window is set to be always on top.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true/false, whether the window is always on top.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.isMaximized" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether a window is maximized.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true if the window is maximized, false otherwise.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.isMinimized" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether a window is minimized.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true if the window is minimized, false otherwise.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.isSizable" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether a window is resizable.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true/false, whether the window is resizable.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <KeyWord name="WindowLib.isVisible" func="yes">
            <Overload retVal="" descr="
							;---------
							; DESCRIPTION:    Determine whether a window is visible, based on its style.
							; PARAMETERS:
							;  titleString (I,OPT) - Title string that identifies your chosen window.
							;                        Defaults to the active window (&quot;A&quot;).
							; RETURNS:        true/false, whether the window is visible.
							;---------">
                <Param name="titleString := &quot;A&quot;" />
            </Overload>
        </KeyWord>
        <!-- *gdb END CLASS: WindowLib -->

        <KeyWord name="WinExist" func="yes">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
                <Param name="ExcludeTitle"/>
                <Param name="ExcludeText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="WinGet"/>
        <KeyWord name="WinGetActiveStats"/>
        <KeyWord name="WinGetActiveTitle"/>
        <KeyWord name="WinGetClass"/>
        <KeyWord name="WinGetPos"/>
        <KeyWord name="WinGetText"/>
        <KeyWord name="WinGetTitle"/>
        <KeyWord name="WinHide"/>
        <KeyWord name="WinKill"/>
        <KeyWord name="WinMaximize"/>
        <KeyWord name="WinMenuSelectItem"/>
        <KeyWord name="WinMinimize"/>
        <KeyWord name="WinMinimizeAll"/>
        <KeyWord name="WinMinimizeAllUndo"/>
        <KeyWord name="WinMove"/>
        <KeyWord name="WinRestore"/>
        <KeyWord name="WinSet"/>
        <KeyWord name="WinSetTitle"/>
        <KeyWord name="WinShow"/>
        <KeyWord name="WinWait"/>
        <KeyWord name="WinWaitActive"/>
        <KeyWord name="WinWaitClose"/>
        <KeyWord name="WinWaitNotActive"/>
        <KeyWord name="Wrap"/>
        <KeyWord name="XButton1"/>
        <KeyWord name="XButton2"/>
        <KeyWord name="XDigit"/>
        <KeyWord name="xm"/>
        <KeyWord name="xp"/>
        <KeyWord name="xs"/>
        <KeyWord name="Yes"/>
        <KeyWord name="ym"/>
        <KeyWord name="yp"/>
        <KeyWord name="ys"/>
        <KeyWord name="_AddRef"/>
        <KeyWord name="_Clone"/>
        <KeyWord name="_GetAddress"/>
        <KeyWord name="_GetCapacity"/>
        <KeyWord name="_HasKey"/>
        <KeyWord name="_Insert"/>
        <KeyWord name="_MaxIndex"/>
        <KeyWord name="_MinIndex"/>
        <KeyWord name="_NewEnum"/>
        <KeyWord name="_Release"/>
        <KeyWord name="_Remove"/>
        <KeyWord name="_SetCapacity"/>
        <KeyWord name="__Call"/>
        <KeyWord name="__Delete"/>
        <KeyWord name="__Get"/>
        <KeyWord name="__New"/>
        <KeyWord name="__Set"/>
<!--
Alphabet Order:     1 to 9, A to Z, _
Missing:            0, a to z, #, {, %, @, $, ^, ~, +
Alphabet Notes:     # and { Seems broken, Possibly related to additionalWordChar="", but _ works.
-->
<!--    'Broken' words list

        <KeyWord name="#AllowSameLineComments"/>
        <KeyWord name="#ClipboardTimeout" func="no">
            <Overload retVal="">
                <Param name="Milliseconds"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#CommentFlag" func="no">
            <Overload retVal="">
                <Param name="NewString"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#ErrorStdOut"/>
        <KeyWord name="#EscapeChar" func="no">
            <Overload retVal="">
                <Param name="NewString"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#HotkeyInterval" func="no">
            <Overload retVal="">
                <Param name="Milliseconds"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#HotkeyModifierTimeout" func="no">
            <Overload retVal="">
                <Param name="Milliseconds"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#Hotstring" func="no">
            <Overload retVal="">
                <Param name="NoMouse"/>
            </Overload>
            <Overload retVal="">
                <Param name="EndChars"/>
                <Param name="NewChars"/>
            </Overload>
            <Overload retVal="">
                <Param name="NewOptions"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#If" func="no">
            <Overload retVal="">
                <Param name="Expression"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#IfTimeout" func="no">
            <Overload retVal="">
                <Param name="Timeout"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#IfWinActive" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#IfWinExist" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#IfWinNotActive" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#IfWinNotExist" func="no">
            <Overload retVal="">
                <Param name="WinTitle"/>
                <Param name="WinText"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#Include" func="no">
            <Overload retVal="">
                <Param name="FileOrDirName"/>
            </Overload>
            <Overload retVal="">
                <Param name="&lt;LibName&gr;"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#IncludeAgain" func="no">
            <Overload retVal="">
                <Param name="FileOrDirName"/>
            </Overload>
        </KeyWord>
        <Keyword name="#InputLevel" func="no">
            <Overload retVal="">
                <Param name="Level"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#InstallKeybdHook"/>
        <KeyWord name="#InstallMouseHook"/>
        <KeyWord name="#KeyHistory" func="no">
            <Overload retVal="">
                <Param name="MaxEvents"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#MaxHotkeysPerInterval" func="no">
            <Overload retVal="">
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#MaxMem" func="no">
            <Overload retVal="">
                <Param name="Megabytes"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#MaxThreads" func="no">
            <Overload retVal="">
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#MaxThreadsBuffer" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#MaxThreadsPerHotkey" func="no">
            <Overload retVal="">
                <Param name="Value"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#MenuMaskKey" func="no">
            <Overload retVal="">
                <Param name="KeyName"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#NoEnv"/>
        <KeyWord name="#NoTrayIcon"/>
        <KeyWord name="#Persistent"/>
        <KeyWord name="#SingleInstance" func="no">
            <Overload retVal="">
                <Param name="Force|Ignore|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#UseHook" func="no">
            <Overload retVal="">
                <Param name="On|Off"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#Warn" func="no">
            <Overload retVal="">
                <Param name="WarningType"/>
                <Param name="WarningMode"/>
            </Overload>
        </KeyWord>
        <KeyWord name="#WinActivateForce"/>

        <KeyWord name="{Alt}"/>
        <KeyWord name="{AltDown}"/>
        <KeyWord name="{AltUp}"/>
        <KeyWord name="{AppsKey}"/>
        <KeyWord name="{BackSpace}"/>
        <KeyWord name="{Browser_Back}"/>
        <KeyWord name="{Browser_Favorites}"/>
        <KeyWord name="{Browser_Forward}"/>
        <KeyWord name="{Browser_Home}"/>
        <KeyWord name="{Browser_Refresh}"/>
        <KeyWord name="{Browser_Search}"/>
        <KeyWord name="{Browser_Stop}"/>
        <KeyWord name="{BS}"/>
        <KeyWord name="{CapsLock}"/>
        <KeyWord name="{Control}"/>
        <KeyWord name="{Ctrl}"/>
        <KeyWord name="{CtrlBreak}"/>
        <KeyWord name="{CtrlDown}"/>
        <KeyWord name="{CtrlUp}"/>
        <KeyWord name="{Del}"/>
        <KeyWord name="{Delete}"/>
        <KeyWord name="{Down}"/>
        <KeyWord name="{End}"/>
        <KeyWord name="{Enter}"/>
        <KeyWord name="{Esc}"/>
        <KeyWord name="{Escape}"/>
        <KeyWord name="{F1}"/>
        <KeyWord name="{F10}"/>
        <KeyWord name="{F11}"/>
        <KeyWord name="{F12}"/>
        <KeyWord name="{F13}"/>
        <KeyWord name="{F14}"/>
        <KeyWord name="{F15}"/>
        <KeyWord name="{F16}"/>
        <KeyWord name="{F17}"/>
        <KeyWord name="{F18}"/>
        <KeyWord name="{F19}"/>
        <KeyWord name="{F2}"/>
        <KeyWord name="{F20}"/>
        <KeyWord name="{F21}"/>
        <KeyWord name="{F22}"/>
        <KeyWord name="{F23}"/>
        <KeyWord name="{F24}"/>
        <KeyWord name="{F3}"/>
        <KeyWord name="{F4}"/>
        <KeyWord name="{F5}"/>
        <KeyWord name="{F6}"/>
        <KeyWord name="{F7}"/>
        <KeyWord name="{F8}"/>
        <KeyWord name="{F9}"/>
        <KeyWord name="{Home}"/>
        <KeyWord name="{Ins}"/>
        <KeyWord name="{Insert}"/>
        <KeyWord name="{Joy1}"/>
        <KeyWord name="{Joy10}"/>
        <KeyWord name="{Joy11}"/>
        <KeyWord name="{Joy12}"/>
        <KeyWord name="{Joy13}"/>
        <KeyWord name="{Joy14}"/>
        <KeyWord name="{Joy15}"/>
        <KeyWord name="{Joy16}"/>
        <KeyWord name="{Joy17}"/>
        <KeyWord name="{Joy18}"/>
        <KeyWord name="{Joy19}"/>
        <KeyWord name="{Joy2}"/>
        <KeyWord name="{Joy20}"/>
        <KeyWord name="{Joy21}"/>
        <KeyWord name="{Joy22}"/>
        <KeyWord name="{Joy23}"/>
        <KeyWord name="{Joy24}"/>
        <KeyWord name="{Joy25}"/>
        <KeyWord name="{Joy26}"/>
        <KeyWord name="{Joy27}"/>
        <KeyWord name="{Joy28}"/>
        <KeyWord name="{Joy29}"/>
        <KeyWord name="{Joy3}"/>
        <KeyWord name="{Joy30}"/>
        <KeyWord name="{Joy31}"/>
        <KeyWord name="{Joy32}"/>
        <KeyWord name="{Joy4}"/>
        <KeyWord name="{Joy5}"/>
        <KeyWord name="{Joy6}"/>
        <KeyWord name="{Joy7}"/>
        <KeyWord name="{Joy8}"/>
        <KeyWord name="{Joy9}"/>
        <KeyWord name="{JoyAxes}"/>
        <KeyWord name="{JoyButtons}"/>
        <KeyWord name="{JoyInfo}"/>
        <KeyWord name="{JoyName}"/>
        <KeyWord name="{JoyPOV}"/>
        <KeyWord name="{JoyR}"/>
        <KeyWord name="{JoyU}"/>
        <KeyWord name="{JoyV}"/>
        <KeyWord name="{JoyX}"/>
        <KeyWord name="{JoyY}"/>
        <KeyWord name="{JoyZ}"/>
        <KeyWord name="{LAlt}"/>
        <KeyWord name="{Launch_App1}"/>
        <KeyWord name="{Launch_App2}"/>
        <KeyWord name="{Launch_Mail}"/>
        <KeyWord name="{Launch_Media}"/>
        <KeyWord name="{LButton}"/>
        <KeyWord name="{LControl}"/>
        <KeyWord name="{LCtrl}"/>
        <KeyWord name="{Left}"/>
        <KeyWord name="{LShift}"/>
        <KeyWord name="{LWin}"/>
        <KeyWord name="{LWinDown}"/>
        <KeyWord name="{MButton}"/>
        <KeyWord name="{Media_Next}"/>
        <KeyWord name="{Media_Play_Pause}"/>
        <KeyWord name="{Media_Prev}"/>
        <KeyWord name="{Media_Stop}"/>
        <KeyWord name="{NumLock}"/>
        <KeyWord name="{Numpad0}"/>
        <KeyWord name="{Numpad1}"/>
        <KeyWord name="{Numpad2}"/>
        <KeyWord name="{Numpad3}"/>
        <KeyWord name="{Numpad4}"/>
        <KeyWord name="{Numpad5}"/>
        <KeyWord name="{Numpad6}"/>
        <KeyWord name="{Numpad7}"/>
        <KeyWord name="{Numpad8}"/>
        <KeyWord name="{Numpad9}"/>
        <KeyWord name="{NumpadAdd}"/>
        <KeyWord name="{NumpadClear}"/>
        <KeyWord name="{NumpadDel}"/>
        <KeyWord name="{NumpadDiv}"/>
        <KeyWord name="{NumpadDot}"/>
        <KeyWord name="{NumpadDown}"/>
        <KeyWord name="{NumpadEnd}"/>
        <KeyWord name="{NumpadEnter}"/>
        <KeyWord name="{NumpadHome}"/>
        <KeyWord name="{NumpadIns}"/>
        <KeyWord name="{NumpadLeft}"/>
        <KeyWord name="{NumpadMult}"/>
        <KeyWord name="{NumpadPgdn}"/>
        <KeyWord name="{NumpadPgup}"/>
        <KeyWord name="{NumpadRight}"/>
        <KeyWord name="{NumpadSub}"/>
        <KeyWord name="{NumpadUp}"/>
        <KeyWord name="{Pause}"/>
        <KeyWord name="{PGDN}"/>
        <KeyWord name="{PGUP}"/>
        <KeyWord name="{PrintScreen}"/>
        <KeyWord name="{RAlt}"/>
        <KeyWord name="{Raw}"/>
        <KeyWord name="{RButton}"/>
        <KeyWord name="{RControl}"/>
        <KeyWord name="{RCtrl}"/>
        <KeyWord name="{Right}"/>
        <KeyWord name="{RShift}"/>
        <KeyWord name="{RWin}"/>
        <KeyWord name="{RWinDown}"/>
        <KeyWord name="{ScrollLock}"/>
        <KeyWord name="{Shift}"/>
        <KeyWord name="{ShiftDown}"/>
        <KeyWord name="{ShiftUp}"/>
        <KeyWord name="{Space}"/>
        <KeyWord name="{Tab}"/>
        <KeyWord name="{Up}"/>
        <KeyWord name="{Volume_Down}"/>
        <KeyWord name="{Volume_Mute}"/>
        <KeyWord name="{Volume_Up}"/>
        <KeyWord name="{WheelDown}"/>
        <KeyWord name="{WheelUp}"/>
        <KeyWord name="{XButton1}"/>
        <KeyWord name="{XButton2}"/>
        <KeyWord name="{#}"/>
        <KeyWord name="{$}"/>
        <KeyWord name="{^}"/>
        <KeyWord name="{~}"/>
        <KeyWord name="{+}"/>
-->
    </AutoComplete>
</NotepadPlus>