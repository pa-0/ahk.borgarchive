# New Ideas
	Add !c copy-all hotkey to debug popup
	Add some way to pull EMC2 IDs from various windows' titles
		Could use find-best-solution script's approach - look for record types (like "DLG") and give user a list of window titles to pick from
			Can maybe steal from ActionObjectEMC2 for help identifying record types
			Might want to look for naked IDs as well for stuff like SLG window titles?
		Only prompt if multiple - otherwise just return the single found INI/ID
			Maybe also suppress prompt if multiple titles, but all have same INI/ID (or even same ID but some have unknown INIs)?
		Use cases:
			Insert-current-DLG hotkey (keep ^!i for sending just ID, add ^!#i for sending INI ID)
			TLG selector - special keyword for RECORD that triggers this check (and possibly an extra popup)
			Generic copy/open/link hotkeys - fall back to this when nothing is selected? (may be overkill/get in the way)
	Expand arbitrary-date-sender to allow picking days of the week instead of just +/-x days
		t<+-><mtwrfsu> => The mon/tues/etc. after/before today (noninclusive)
		Alternative idea: use d (for day of week) instead of t: d<+-><mtwrfsu>
			Example: d+t is the Tuesday after today
		Alternative idea: just support "+d" as a general suffix, chainable to the end of any other statement
			Doesn't seem worth making EVERYTHING chainable (what would m+1+1 mean?), so it'd be only these days of the week.
		Alternative idea: add this to "w" instead:
			w+1m => Next week's Monday
		Will require updates to both RelativeDate (deciding how to apply different increments) and RelativeDateTimeBase (splitting up string)
	EpicStudio debug: consider just using a single value of user:<EMP ID> instead of text name or workstation - seems to cut out the extra background stuff.
	Do we want to create more specific client Codesearch types (for HSWeb only, etc.)?
	OneNote: some easier way to access list of quick access items? (for plugging them back into OneNote when it drops them)
	If I end up using Hyperdrive often, add it as a new launch (probably on ^!#h)
	Add something (for testing purposes) that turns the clipboard into a pastable expression so I can stick it in a variable easily
	Consider adding something mover-sizer-based for closing windows (original had something like double-middle-click or something, I think?)
	Config: is it worth keeping .Init()?
		TableList automatic filters - where should those live?
		.initDone/.isInitialized stuff - just used by debug, worth keeping?
			Would it be better to have the "early" debug popup/toast show up based on whether CommonHotkeys has been initialized?
				Would let us potentially make stuff that's NOT early specific to a type of script (i.e. only show it for the main script)
			Could we just replace it with a public flag (or public setter to a private flag, whatever) on Debug, so that the script itself could decide where the cutover point is?
	Should I switch out the rest of the EPIC_ prefixes for privates and the like with WORK_?
	Consider switching zoom mute toggle over to a click target within the zoom window - would that avoid the "ding" sound?
	CodeSearch: looks like the URL can include the full path now, could we use that to open in client instead of the search approach?
	Re-examine how we run programs and such (RunLib.runAsUser stuff) - could it be the reason we have focus issues?
		Also, could we work around it with a WinWaitExist + WinActivate?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
		Somehow measure the width a field would need to be to fit its description comfortably
			Or does that happen automatically if you add it with a value?
		Maybe include an additional buffer on the end?
			Maybe make it optional with an overall setting?
		What about column widths, in a new top-level line like we have for field order/whether to show?
			Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
	