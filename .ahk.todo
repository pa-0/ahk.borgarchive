# New Ideas
	Consider flipping our collapsing sections: =-- --- --= makes more visual sense than --= === =-- (the stuff inside is boxed in by the borders)
		Notepad++ syntax files
		Existing usage
	Consider adding error handling for Snapper so that it can show a toast and put the original ID list on the clipboard if Snapper is just throwing a tantrum.
	Add something (for testing purposes) that turns the clipboard into a pastable expression so I can stick it in a variable easily
	Consider adding something mover-sizer-based for closing windows (original had something like double-middle-click or something, I think?)
	Config: is it worth keeping .Init()?
		TableList automatic filters - where should those live?
		.initDone/.isInitialized stuff - just used by debug, worth keeping?
			Would it be better to have the "early" debug popup/toast show up based on whether CommonHotkeys has been initialized?
				Would let us potentially make stuff that's NOT early specific to a type of script (i.e. only show it for the main script)
			Could we just replace it with a public flag (or public setter to a private flag, whatever) on Debug, so that the script itself could decide where the cutover point is?
	Should I switch out the rest of the EPIC_ prefixes for privates and the like with WORK_?
	Consider switching zoom mute toggle over to a click target within the zoom window - would that avoid the "ding" sound?
	Would a static ErrorToast wrapper make sense, rather than having to do the whole new ErrorToast("").showMedium() thing each time?
		Honestly do we just want a static method for Toast in general, for the simple calls?
			So only get into the instance stuff when I need to set special settings or have it persist
	CodeSearch: looks like the URL can include the full path now, could we use that to open in client instead of the search approach?
	Could we make it easier to update current version of Hyperspace?
		Places I have to change now:
			Source folders in privates
			EXE in windows
			Current environments in epicEnvironments
		Spots to update EMC2 version:
			Path in programs
			EXE in windows
	Consider moving Hyperspace path back into programs with all the others
		Could include version tags in path - replace them when running?
			Probably a separate run function - .replaceTagsAndRun() or similar?
				Could include the parameters in the caller, more like other programs
		Same for VDI - is the separate run function really needed?
			Would need to support some way to stick an argument in the middle of the string - maybe a generic <ARGS> tag or something similar?
				ARGS is too generic, though - seems like it would go on the end?
				Same mechanism as we end up using for Hyperspace, maybe?
	Re-examine how we run programs and such (RunLib.runAsUser stuff) - could it be the reason we have focus issues?
		Also, could we work around it with a WinWaitExist + WinActivate?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
		Somehow measure the width a field would need to be to fit its description comfortably
			Or does that happen automatically if you add it with a value?
		Maybe include an additional buffer on the end?
			Maybe make it optional with an overall setting?
		What about column widths, in a new top-level line like we have for field order/whether to show?
			Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
	