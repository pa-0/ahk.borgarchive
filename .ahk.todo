# New Ideas
	Remove VA library once I'm sure new mute logic works correctly at home, too
	Add process explorer (with updated machine-level path in config) to VDIs
	Consider adding a new level to MACHINE stuff - instead of sprinkling individual machines through the code, have two machine "types" (work and home) that are used in most cases
		Could have hard-coded "types" per machine, or it could live in settings.ini instead
			If we go with something independent - could name it something like "context" - work vs. home
		Current uses of machine stuff:
			Config files using MACHINE as a filter:
				search - hide work-specific search methods (type)
				resize - hide work-specific sizes (type) + switch positions for different machines (type or machine?)
				programs - switch program paths (machine)
				paths - hide work-specific paths (type)
				folders - hide work-specific folders (type)
				mappedDrives - hide work-specific mappings (type)
				actionObject - hide work-specific actions/subTypes (type)
			Code that uses MACHINE:
				mainConfig - reading in and providing access (direct, selector filter, individual checks)
			Callers to MainConfig.machine*
				.machine
					onetastic - to replace CURRENT_MACHINE tags in macros
				.machineSelectorFilter - callers to config files above
				.machineIs*
					input - mute and browser back/forward hotkey switches (machine, but maybe should be settings instead?)
					launch - avoid work-specific actions (type, but some will be machine because VDIs)
					programs - avoid work-specific hotkeys (machine, as most aren't installed in VDIs)
					main - which additional scripts to run (currently type, want to make machine for VDIs)
					chrome - part of "is page codesearch" check (type)
					onenote - switch todo page title method (type)
					outlook - new mail hotkey (type)
			Others:
				setup.tls - Specifies the machine for firstSetup
				settings.ini - Where machine comes from
		Current usage breakdown by what makes sense:
			Machine
				programs - switch program paths
				.machineIs* > outlook - new mail hotkey
				.machineIs* > main - which additional scripts to run
				.machineIs* > launch - avoid work-specific actions (outlook, phone)
				.machineIs* > programs - avoid work-specific hotkeys (outlook, spotify, everything, telegram, github, launchy, yed, firefox portable)
			Context
				search - hide work-specific search methods
				resize - hide work-specific sizes + switch positions
				paths - hide work-specific paths
				folders - hide work-specific folders
				mappedDrives - hide work-specific mappings
				actionObject - hide work-specific actions/subTypes
				.machine > onetastic - to replace CURRENT_MACHINE tags in macros (onenote page widths + specific[s] section)
				.machineIs* > chrome - part of "is page codesearch" check
				.machineIs* > onenote - switch todo page title method
				.machineIs* > input - mute and browser back/forward hotkey switches
				.machineIs* > launch - avoid work-specific actions (rest)
				.machineIs* > programs - avoid work-specific hotkeys (rest)
			Both (specify/access values)
				setup.tls - Specifies the machine for firstSetup
				settings.ini - Where machine comes from
				mainConfig - reading in and providing access (direct, selector filter, individual checks)
					.machineSelectorFilter - callers to config files above
		Use cases:
			No longer running UAC-killing script in VDIs
			Add support for minimizing Explorer windows the "normal" way in VDIs
			Should MENU_KEY_ACTION just be based on machine instead?
	FormatList - consider adding support for ranges (maybe colons or hyphens?)
		Both input and output?
	Consider augmenting/overloading the generic array class/object thing - to add stuff like join, dropping empty values, etc.
		Maybe string, too - could build in tag replacement, contains, etc.
	Allow opening routines in EpicStudio in an environment other than DBC Dev (allow CDE)
		Options:
			New column in actionObject.tl for environment (would also allow us to expand codesearch routine option)
			New type of codesearch type with separate branch in ActionObject (not ideal)
	Consider some way to use the title + URL of current tab in Chrome, and add a link to OneNote (or maybe other places as well?)
		Maybe store off both title (maybe trimmed, drop things like " - Wiki" off of the end, etc?) and URL on copy hotkey
			Used by a generic hotkey that used those two bits of info + hyperlinking class to add a link?
	EpicStudio - add a diffing hotkey (simple ^d maybe?) that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	EpicStudio - add a way to fill in a list of IDs
		Before/after inputs on Selector popup for code surrounding lines?
		Make use of FormatList, fl.getList(FormatList.Format_Array)
		Maybe take this a step further and make it specifically filling in an array?
		Make sure that dot level is taken into account (I think I have functions for that)
	Consider adding a client-file-viewing search to either search selector or actionObject (like codesearch routine)
	Add some way to move windows where I want them
		Hotkey-triggered, for all windows in list?
		Maybe lean on monitor fixer script from before?
		Make sure monitor exists before putting a window there
		Spotify
			Switch to other monitor, then correct one
			At home: move to correct height (not cut off)
		Work
			KDiff window - maximize on center screen
			MatterMost - half of left screen
		Telegram - left monitor, top or bottom depending on machine
		Pidgin window - top-right of left monitor
	
# Rewrites/Cleanup
	Rewrite colorette so we don't have to deal with the exe?
		Would let us get rid of the special exe case in .gitignore, too
	Clean up psxEmulatorController to be a proper standalone script instead of a sub script
	
# Selector/TableList
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	Consider adding a way to match on some other column than just NAME and ABBREV
		Use cases
			Transaction dump all script, to get name from epicEnvironments TLS instead of just using COMMID
				Alternatively, build out environments in MainConfig (though only if Epic machine) so we can retrieve specific data from it like we do windows, etc.
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow (across columns), with next field being empty or placeholder'd
	Consider reading in more .tl/.tls files at startup and caching them
		Alternatively, cache them after the first use?
			Basically static variables, like we're doing in Hyperlinker
	
# Toast
	Could we avoid flickering between .showPersistent() and .setText()?
		Maybe some way to set position without showing?
		It's kind of strange that .setText() shows the toast if it's hidden - could we avoid that, or is it required by Toast framework?
	Figure out how to deal with Toast/VisualWindow issue where upper-right toasts jump to the next monitor over
		Happens if they're anchored to right edge and then their text gets longer by enough.
		Looks like the issue is that we make the toast bigger enough that Windows decides it's on the next monitor
			We create a new VisualWindow each time we want to move the Toast
				Maybe we should have a persistent one instead?
			The actual resizing (via Gui, Show with AutoSize) happens in Toast.move()
				What if we create the VisualWindow earlier (before the AutoSize) and somehow use that to save off or anchor the Toast to the current monitor?
		When we fix this, we can update:
			iconTester.ahk - don't need a toast message up front, can be blank to start and we can just call switchToIconWithNum(0) instead of getting the text
	Do we want to add negative x/y values to mean how far off of the right/bottom to be?
		Would let us say, implement timer to be like the Windows media tile
	
# Documentation
	Figure out some central documentation method
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show window with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	common
		classes
			duration
			listConverter
			mainConfig
			selectorGui
		functions
			clipboard
			data
			dateTime
			epic
			file
			gui
			io
			runCommands
			string
	sub
		killUAC
		vimBindings
	standalone
		halfQWERTY
		psxEmulatorController
	