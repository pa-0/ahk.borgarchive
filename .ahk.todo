# New Ideas
	Is there some way to show all hotkeys that are active in current state?
		Or is that evaluated when hotkeys are pressed?
	Would it be nicer to move windowPositionPresets.tl into code and just generate those choices directly?
	With 7+ Taskbar Tweaker being iffy at work, would it make sense to move back towards AHK handling middle click on taskbar button to close?
		One method: right-click + get to close (like https://autohotkey.com/board/topic/149642-middle-click-on-taskbar-button-to-close-apps-windows-10/ )
		Alternatively (or additionally), do we want to look into something with mover-sizer that closes the window, like the original stuff did?
	Config: is it worth keeping .isInitialized stuff?
		Would it be better to have the "early" debug popup/toast show up based on whether CommonHotkeys has been initialized?
			Would let us potentially make stuff that's NOT early specific to a type of script (i.e. only show it for the main script)
		Could we just replace it with a public flag (or public setter to a private flag, whatever) on Debug, so that the script itself could decide where the cutover point is?
	Config: is it worth keeping .Init()?
		rootPath would need to be set before callers use items
			It's only used by the private, cached-on-demand stuff though - seems pretty reasonable
			If we really wanted we could make it another cached-on-demand property, or just re-run the logic when we lazy-load the cached stuff
		TableList automatic filters - where should those live?
	Figure out what to do with media player stuff
		Including:
			Spotify "commands"
			Spotify showing info - is this useful anymore or can we go back to volume up/down to show actual media panel?
			Config media player stuff
				Support in general
				Setting settings value/settingsINIPath (only used by media player stuff)
	Onetastic macros now support exporting everything together - should we consider just building the sum XML and importing that using the built-in import instead of our piecemeal approach?
	Apparently class names are stored in object.__Class - could we use that and get rid of Debug_TypeName()?
		Will want to double-check that we're not relying on that to decide whether to use a custom debug display (I'd hope we're using the actual debug method instead?)
	Consider switching zoom mute toggle over to a click target within the zoom window - would that avoid the "ding" sound?
	Consider renaming fixWindowPosition* stuff and moving it into a static class
	Would a static ErrorToast wrapper make sense, rather than having to do the whole new ErrorToast("").showMedium() thing each time?
	Would a clear-all-notifications hotkey be nice for Windows notification center?
		Or will it be easier to just tab a few times to get to the dismiss all button?
		Focused "window" info
			Action center
			ahk_class Windows.UI.Core.CoreWindow
			ahk_exe ShellExperienceHost.exe
	Consider breaking some common bits for tiny standalone scripts, out into something separate from the normal load-all-common-stuff
		Should help speed up tiny scripts like media keys
	Consider adding "jiggling" for certain windows in fix-window-positions script, to fix toolbar buttons
		Unmaximize (already doing this, I think?) + move to another monitor + move back
		Windows
			Outlook
			Explorer
	Could we make it easier to update current version of Hyperspace?
		Places I have to change now:
			Source folders in privates
			EXE in windows
			Current environments in epicEnvironments
		Spots to update EMC2 version:
			Path in programs
			EXE in windows
	Consider moving Hyperspace path back into programs with all the others
		Could include version tags in path - replace them when running?
			Probably a separate run function - .replaceTagsAndRun() or similar?
				Could include the parameters in the caller, more like other programs
		Same for VDI - is the separate run function really needed?
			Would need to support some way to stick an argument in the middle of the string - maybe a generic <ARGS> tag or something similar?
				ARGS is too generic, though - seems like it would go on the end?
				Same mechanism as we end up using for Hyperspace, maybe?
	Consider a new copy hotkey for Visual Studio - copies the selected tag + file, like we do for CodeSearch stuff
		Do we want to rethink the file/folder hotkeys, and reserve !c for "copy this spot in the code"?
		Hotkeys we could use:
			!c - currently location in EpicStudio (and maybe CodeSearch?), file most other spots
			!#c - currently folder in most spots
			^!c
			^#!c - currently DLG-relative folder copy for client (but not limited to Explorer, interestingly?)
			^+c - currently copy script in EpicStudio, toggle comment/code elsewhere - NOT a good option to me.
		Would we want just the file, or the whole (relative to DLG) path?
			Maybe 2 separate hotkeys for that?
		Possible things to copy:
			Filename
			Containing folder
				Probably least useful - OPENING containing folder is typically more helpful.
					Though, it would be nice if that hotkey (typically ^+o) matched modifiers with the corresponding copy-file hotkey
						But, ^+c is no good - already overloaded - so maybe we change open-folder hotkey instead?
			Filepath, relative to DLG folder (client only)
			Code location (file + selected function)
			Code location with path (path + file + selected function)
		Could have 1-3 common ones that get primo hotkeys, then a selector or something that lives on the last one
			Or, just have a selector on !c and pick every time
	Re-examine how we run programs and such (RunLib.runAsUser stuff) - could it be the reason we have focus issues?
		Also, could we work around it with a WinWaitExist + WinActivate?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Figure out some standard documentation method for hotkeys
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show popup with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
		Somehow measure the width a field would need to be to fit its description comfortably
			Or does that happen automatically if you add it with a value?
		Maybe include an additional buffer on the end?
			Maybe make it optional with an overall setting?
		What about column widths, in a new top-level line like we have for field order/whether to show?
			Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
	