# In Progress
	
# Small
	Selector: dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	Figure out what's going wrong with copy-do-page hotkey on home desktop
	
# Large
	Do something to encapsulate search selector - maybe its own class, or merge into ActionObject instad?
		Maybe move the hotkey and its various functions into a separate (general) script?
	Look at cleaning up all of the record-splitting and EMC2-object-processing functions in epic.ahk
		Can getObjectInfoFromEMC2 use extractEMC2ObjectInfoRaw (like selectSnapper does)?
		Can processEMC2ObjectInfo use getTrueEMC2INI?
		Create a new splitRecordString function that combines logic from splitRecordString and extractEMC2ObjectInfoRaw
			Callers to getObjectInfoFromEMC2() (which is the only caller to splitRecordString())
				Various in EMC2 (mostly opening current record elsewhere)
					EMC2
				dlgNumTracker
					EMC2
			Callers to extractEMC2ObjectInfo()
				input > sendStandardEMC2ObjectString()
					EMC2
			Callers to extractEMC2ObjectInfoRaw()
				launch > selectSnapper()
					Generic record
				actionObjectRedirector > tryProcessAsRecord()
					EMC2 or HDR
				actionObjectEMC2 > __New()
					EMC2
			Could potentially be part of the new class idea for EMC2 object string parsing below
			Handle title as 3rd piece
			Handle more than just " " as a delimiter
			Maybe trim "R " of of start if it's there, too
		Should this be a new class for Epic objects in general? "EpicRecord", perhaps?
			Can initialize from various inputs
				Programmatic string (possibly used by constructor if a string given there)
				Clipboard
				EMC2 title (which uses clipboard method)
				In general, initialization should include:
					Breaking apart bits
					Cleaning out leftovers (like processEMC2ObjectInfo() does now)
			Properties for INI/ID/title
			Can output in various formats
				Standard EMC2 object string
					Include INI verification/replacement
						Could this absorb/replace getTrueEMC2INI()?
							Currently only used by processEMC2ObjectInfo() and ActionObjectEMC2.__New(), most likely possible
					Including special handling for OneNote linking?
						Maybe just make this more generic, method/parameter for linking the record INI/ID
				"R " INI " " ID
					Maybe with title as well if we have it, "<title> [R INI ID]"?
		Other places to use it
			ActionObjectEMC2
			Special OneNote case for standard EMC2 string (mostly selecting the right text and pulling the relevant info out of the class, I think?)
	Consider some way to use the title + URL of current tab in Chrome, and add a link to OneNote (or maybe other places as well?)
		Maybe store off both title (maybe trimmed, drop things like " - Wiki" off of the end, etc?) and URL on copy hotkey
			Used by a generic hotkey that used those two bits of info + hyperlinking class to add a link?
	Rewrite colorette so we don't have to deal with the exe?
		Would let us get rid of the special exe case in .gitignore, too
	Consider some way to more precisely move the mouse cursor on command
		A standalone script (like griddy?) or just a hotkey
		Lock the mouse?
			Until exit?
			Until click?
			Not at all?
		Arrow keys to move cursor
		Maybe modifier keys for bigger jumps, jump to other side of screen, etc.
	Consider moving program-specific functions into their own (program-named) classes?
		Possible first candidate: VB6 (most of the functions don't have a prefix anyway)
		Would remove need to prefix all function names with program name
		Could it make referencing program-specific things from common code easier?
			We're basically talking about interfaces then, aren't we?
	Add a diffing hotkey (simple ^d maybe?) that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	ListConverter - more output methods
		Filling in a OneNote table column (down arrow between?)
		Filling a list of IDs into EpicStudio (Before/after inputs on Selector popup for code surrounding lines, newlines only applied after that)
			Maybe take this a step further and make it specifically filling in an array?
			Make sure that dot level is taken into account (I think I have functions for that)
	Selector - consider adding a way to match on some other column than just NAME and ABBREV
		Use cases
			Transaction dump all script, to get name from epicEnvironments TLS instead of just using COMMID
				Alternatively, build out environments in MainConfig (though only if Epic machine) so we can retrieve specific data from it like we do windows, etc.
			ActionObject* classes that do re-selection, could filter on action to only pick between meaningful options
	Consider reading in more .tl/.tls files at startup and caching them
		Alternatively, cache them after the first use?
			Basically static variables, like we're doing in Hyperlinker
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow (across columns), with next field being empty or placeholder'd
	Consider adding a client-file-viewing search to either search selector or actionObject (like codesearch routine)
	Consider augmenting/overloading the generic array class/object thing - to add stuff like join, dropping empty values, etc.
	Allow opening routines in EpicStudio in an environment other than DBC Dev (allow CDE)
		Options:
			New column in actionObject.tl for environment (would also allow us to expand codesearch routine option)
			New type of codesearch type with separate branch in ActionObject (not ideal)
	Figure out some central documentation method
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show window with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	Add some way to move windows where I want them
		Hotkey-triggered, for all windows in list?
		Maybe lean on monitor fixer script from before?
		Make sure monitor exists before putting a window there
		Spotify
			Switch to other monitor, then correct one
			At home: move to correct height (not cut off)
		Work
			KDiff window - maximize on center screen
			MatterMost - half of left screen
		Telegram - left monitor, top or bottom depending on machine
		Pidgin window - top-right of left monitor
	
# Documentation
	common
		classes
			duration
			iniObject
			listConverter
			mainConfig
			selectorGui
		functions
			clipboard
			data
			dateTime
			epic
			file
			gui
			io
			runCommands
			string
	program
		emc2
		epicStudio
			Reconsider debug functions
		excel
		hyperspace
		outlook
		putty
		snapper
		vb6
	standalone
		halfQWERTY
		killUAC
		psxEmulatorController
		vimBindings
	