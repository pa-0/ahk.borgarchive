# In Progress
	
# Small
	Have compileEpicStudioRegex.ahk show an FYI toast when it's finished
	Selector: dynamically resize abbreviation column based on widest value?
		Is that going to get weird with SelectorGui+FlexTable interactions?
	Look at cleaning up all of the record-splitting and EMC2-object-processing functions in epic.ahk
		Can getObjectInfoFromEMC2 use extractEMC2ObjectInfoRaw (like selectSnapper does)?
		Can processEMC2ObjectInfo use getTrueEMC2INI?
	Add catch and error toast for launching a program that doesn't exist (Launchy in VDIs, for example)
	Consider moving class-specific constants into their respective classes
		ActionObject
		Duration
		Hyperlinker
		ListConverter
		MainConfig
		TableList
		TableListMod
		WindowInfo
	Do something to encapsulate search selector - maybe its own class, or merge into ActionObject instad?
	
# Large
	ActionObject cleanup/rework
		Overall goal
			Generic open/get link(/linkSelectedText?) hotkeys
				Figure out the type (based on value) if possible (EMC2 objects, full URLs/paths)
				Prompt user if type (or value) is unknown (only those two should be affected by selector popup)
					Redo any pre-processing (path sub-type, for example) with new type/value
				Do any post-processing/cleanup needed
				Perform the action based on the determined type
		Potential new structure
			Parent (ActionObject) class that constructs with input and optional type/subType
				Determines the type from input (if possible and not already given)
					If type OR input is blank, selector popup to determine whichever is needed
						If blank, early quit (without error toast)
						Can also determine subType, pass that along if populated
				Constructor does the above determination/popup, then returns an instance of one of the child classes
					If can't determine type: return "" and handle error toast)
				Properties for type/subType (mostly for debugging/error display purposes)
				Functions for specific actions (.run(runType), .getLink(linkType), .linkSelectedText(linkType))
					Maybe "not implemented" error toast (with various info) instead of simply empty?
			Child classes per type
				Constructors
					Call into any needed cleanup/post-processing
					Determine sub-type if needed
						Calculations based on input (like path sub-type)
							Example: getPathType
						Separate selector if needed (hopefully user should never see 2 selectors, since up-front one mostly includes subType unless it's not needed)
							Possibly add another column of filters to trim down the choices based on the type (and therefore child class?)
								Would require enhancing TableList/Selector to support multiple columns of filtering
				Override (only) applicable action functions with type-specific logic
					Error toast for non-supported combinations (within type, action or subAction + subType)
					Example: buildEMC2Link (would need to update OneNote, which is the other user)
		Can/should we combine CodeSearch and EpicStudio (maybe into a SERVER_ROUTINE type), where CodeSearch is the web version and EpicStudio is the edit?
			Main question would be EpicStudio DLG support - do we end up rerouting web EpicStudio DLG links/opens to the EMC2 web summary for DLG?
				Differentiated by "DLG" subType
				Alternatively, just don't support that action/subType combination
	Consider some way to use the title + URL of current tab in Chrome, and add a link to OneNote (or maybe other places as well?)
		Maybe store off both title (maybe trimmed, drop things like " - Wiki" off of the end, etc?) and URL on copy hotkey
			Used by a generic hotkey that used those two bits of info + hyperlinking class to add a link?
	Rewrite colorette so we don't have to deal with the exe?
		Would let us get rid of the special exe case in .gitignore, too
	Consider some way to more precisely move the mouse cursor on command
		A standalone script (like griddy?) or just a hotkey
		Lock the mouse?
			Until exit?
			Until click?
			Not at all?
		Arrow keys to move cursor
		Maybe modifier keys for bigger jumps, jump to other side of screen, etc.
	Consider moving program-specific functions into their own (program-named) classes?
		Possible first candidate: VB6 (most of the functions don't have a prefix anyway)
		Would remove need to prefix all function names with program name
		Could it make referencing program-specific things from common code easier?
			We're basically talking about interfaces then, aren't we?
	Add a diffing hotkey (simple ^d maybe?) that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	ListConverter - more output methods
		Filling in a OneNote table column (down arrow between?)
		Filling a list of IDs into EpicStudio (Before/after inputs on Selector popup for code surrounding lines, newlines only applied after that)
			Maybe take this a step further and make it specifically filling in an array?
			Make sure that dot level is taken into account (I think I have functions for that)
	Selector - consider adding a way to match on some other column than just NAME and ABBREV
		Could be used for transaction dump all script, to get name from epicEnvironments TLS instead of just using COMMID
		Alternatively, build out environments in MainConfig (though only if Epic machine) so we can retrieve specific data from it like we do windows, etc.
	Consider reading in more .tl/.tls files at startup and caching them
		Alternatively, cache them after the first use?
			Basically static variables, like we're doing in Hyperlinker
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow (across columns), with next field being empty or placeholder'd
	Consider adding a client-file-viewing search to either search selector or actionObject (like codesearch routine)
	Consider augmenting/overloading the generic array class/object thing - to add stuff like join, dropping empty values, etc.
	Allow opening routines in EpicStudio in an environment other than DBC Dev (allow CDE)
		Options:
			New column in actionObject.tl for environment (would also allow us to expand codesearch routine option)
			New type of codesearch type with separate branch in ActionObject (not ideal)
	Figure out some central documentation method
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show window with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	Add some way to move windows where I want them
		Hotkey-triggered, for all windows in list?
		Maybe lean on monitor fixer script from before?
		Make sure monitor exists before putting a window there
		Spotify
			Switch to other monitor, then correct one
			At home: move to correct height (not cut off)
		Work
			KDiff window - maximize on center screen
			MatterMost - half of left screen
		Telegram - left monitor, top or bottom depending on machine
		Pidgin window - top-right of left monitor
	
# Documentation
	common
		classes
			duration
			iniObject
			listConverter
			mainConfig
			selectorGui
		functions
			clipboard
			data
			dateTime
			epic
			file
			gui
			io
			runCommands
			string
	program
		emc2
		epicStudio
			Reconsider debug functions
		excel
		hyperspace
		outlook
		putty
		snapper
		vb6
	standalone
		halfQWERTY
		killUAC
		psxEmulatorController
		vimBindings
	