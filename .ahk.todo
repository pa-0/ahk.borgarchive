# New Ideas
	Standardize how we format & structure classes
		Add member order/capitalization to class template somehow
		! With auto-complete, we don't really need to distinguish public vs. private functions - only the public ones will show up in auto-complete.
		The _privateMember format might still be worth doing to allow public properties with the same name as a private member
			Do we actually have a need to do that, though?
				Only in specific cases, where we're actually doing additional logic for the public function/property (like for TempSettings, where we're storing off the previous value)
		New plan:
			Capitalization - only constants are PascalCase, everything else is camelCase
				One exception - an Init() function that acts like a constructor for a static class should also be PascalCase.
			Order
				Public
					Constants
					staticMembers
					nonStaticMembers
					properties
					__New()/Init()
					otherFunctions
				Private
					Constants
					staticMembers
					nonStaticMembers
					functions
			Specific offenders
				Out of order members
					***
				PublicMembersOrFunctions
					***
				_privateMembers
					***
				_boundFuncFunctions
					program
						Chrome
						Hyperspace
						OneNote
				Constants (to review scope/capitalization of)
					program
						Snapper - _names
					class_
						SelectorGui - should Char_NewColumn be public?
						TableListMod - should Operation_ constants be public? [[Unsure]]
						VisualWindow - do we want to keep the RESIZE_ capitalization for those constants?
					lib
						AHKCodeLib
					static
						Config - should Machine_/Context_ constants be private, since all callers can just use wrapper properties?
						Debug
	Putty - shouldn't last* members be private instead?
	Duration - can we rearrange units vs. characters again?
		Currently, individual char constants and char->covert mapping:
			static Char_Hour := "h"
			...
			static _units := {Duration.Char_Hour:3600, Duration.Char_Minute:60, Duration.Char_Second:1} ; {unitChar: multiplierToSeconds}
		Maybe turn it into unit-specific chunks, like this:
			static Unit_Hour := {"Char":"h", "Conversion":3600}
				Use by external caller: durationObj.subTime(1, Duration.Unit_Second["Char"])
		Or, just 2 separate constants each:
			static Unit_Hour := "h"
			static Convert_Hour := 3600
		Or, 2 mappings to conversion factor?
			static UnitChars   := {"Hour":3600, "Minute":60, "Second":1}
			static UnitConvert := {"h":   3600, "m":     60, "s":     1}
	Auto-complete - could we make a special kind of header that can cover multiple things?
		At least one-line constants (just X number of lines until we get a blank line, maybe?)
			Would let us line things up nicely again
	Can we rename FormatList to make more sense?
		It's an instance class, so maybe FormattedList?
	Consider renaming getDebugTypeName to start with "debug" so everything in the debug scope does.
	Can we do something to split up the multi-class program scripts?
		Should they be separate files?
			Maybe a sub-folder in program\?
				Only apply this to sub-program-specific classes, not the main ones
		Specifics:
			EpicStudio - MSnippets
			OneNote - OneNoteTodoPage, OneNoteRecurringTodo
	Notepad++ AHK syntax highlighting: can we auto-update the XML based on the code, like we do for auto-complete?
		Could we even use the same data structure/info from reading all the scripts?
		Folder to keyword mapping:
			static\        - Keywords2
			lib\           - Keywords3
			base\ + class\ - Keywords6
	Consider additional user-defined languages in Notepad++:
		My todo lists
			!? We can't override the python language to add extra exceptions or something, can we?
			Headers
			Custom folding based on prefix chars?
				If we can't come up with something solid for this, may as well stick to python - often build up long lists that I'd want to be able to collapse at various levels.
		tl/tls files
			Special characters
				;  - Ignore (comment line)
				(  - Model (highlight whole line)
				@  - Settings (whole line, or at least word up to =)
						Maybe also just specific setting names? WindowTitle, MinColumnWidth
				#  - Headers (ideally different from comments?)
				[] - Mod lines (highlight start/end chars, +/-numeric labels?, maybe specifically .replaceWith() stuff as well?)
				|  - Multi-entry (make sure to support inside of mod lines)
				-  - Placeholder (highlight char)
				)  - Key (whole line)
				!  - New column
			Collapse on mods
			Is there any fancy highlighting/lines we could add to match up with columns?
	Consider a new "text table" class, that takes a bunch of label-value pairs and (assuming a fixed-width font) aligns everything like a table
		Somehow support sub-tables as well? Maybe just additional instances of these same 'text tables"?
		Support right-alignment of columns
		Support min column width
		Use cases:
			Debug toast
			Debug popup (would need to set font if so)
			ColorPicker - RGB "table", hotkey toast
	Consider changing the approach for hyperlinker a bit
		Have OneNote, others that need special handling do it themselves somehow
		Ideas:
			Passing in a BoundFunc
			Just having a function with the right name
				Would require a mapping from window name to class where function lives
			Have programs that need special handling call into the logic themselves and handle special logic
	Hotkey for automatically breaking up documentation lines to 100 chars wide
		Possibly reconsider the 100-char limit - wouldn't wider make more sense?
		Could take into account whether there would be only 1 small word moved down
		Could handle multiple line breaks
	Allow opening routines in EpicStudio in an environment other than DBC Dev (mainly to allow CDE)
		Probably a new (optional) data element throughout ActionObject* (and a new column in actionObject.tls)
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Add some way to move windows where I want them
		Hotkey-triggered, for all windows in list?
		Maybe lean on monitor fixer script from before?
		Make sure monitor exists before putting a window there
		Spotify
			Switch to other monitor, then correct one
			At home: move to correct height (not cut off)
		Work
			KDiff window - maximize on center screen
			MatterMost - half of left screen
		Telegram - left monitor, top or bottom depending on machine
		Pidgin window - top-right of left monitor
	Figure out some central documentation method
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show popup with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	
# Selector
	Add some setting to have the popup appear when we pass in a bad value?
		Use case: Snapper, when we're on an INI we don't have items for.
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	Consider adding a way to match on some other column than just NAME and ABBREV
		Use cases
			Transaction dump all script, to get name from epicEnvironments TLS instead of just using COMMID
	
# Toast
	Consider a new function to append a new line of text (and maybe one to just append text to the current line) to the current Toast.
		Could be nice to have in progress-type scenarios, to show what we've already done.
		Use cases:
			firstSetup
			updateNotepadPP*
	Could we avoid flickering between .showPersistent() and .setText()?
		Maybe some way to set position without showing?
		It's kind of strange that .setText() shows the toast if it's hidden - could we avoid that, or is it required by Toast framework?
	Figure out how to deal with Toast/VisualWindow issue where upper-right toasts jump to the next monitor over
		Happens if they're anchored to right edge and then their text gets longer by enough.
		Looks like the issue is that we make the toast bigger enough that Windows decides it's on the next monitor
			We create a new VisualWindow each time we want to move the Toast
				Maybe we should have a persistent one instead?
			The actual resizing (via Gui, Show with AutoSize) happens in Toast.move()
				What if we create the VisualWindow earlier (before the AutoSize) and somehow use that to save off or anchor the Toast to the current monitor?
		When we fix this, we can update:
			iconTester.ahk - don't need a toast message up front, can be blank to start and we can just call switchToIconWithNum(0) instead of getting the text
			updateNotepadPPAHKSupport
	Do we want to add negative x/y values to mean how far off of the right/bottom to be?
		Would let us say, implement timer to be like the Windows media tile
	
# Version Restrictions
	VDI current AHK version: 1.1.28.00
	1.1.29.00
		.Count()
			Remove special handling in array/object base classes
	1.1.31.00
		Switch()
			PhoneLib.reduceToDigits()
			Selector.updateSettings()
			AHKCodeLib.getDefLineParts()
			Likely others too - WindowActions and similar would probably benefit
	1.1.31.01
		Execute (X) hotstrings can support spaces
			notepadPlusPlus
			emc2
			hotstrings
	