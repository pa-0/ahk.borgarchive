# New Ideas
	Some way to look ahead at upcoming recurring todos
		Probably something DebugPopup-based?
		.todo hotstring or similar, rather than another separate hotkey?
		Probably a popup for how far ahead to look
			Defaulted to t+1?
			Maybe just take in a range of dates, so I could look at the next week?
				At that point, is the popup just another selector with shortcuts for tomorrow, next week, next month, etc.?
	Messenger activation sometimes gets the wrong window
		Even though Messenger is set as an "Exact" title match
			Turns out this isn't respected when we get down into WindowActions!
				Specifically, we just go from name to titleString (ignoring match-mode override) in .windowAction()
		Fix ideas:
			Somehow carry either the name or just the whole WindowInfo instance down through to all actions
			Fully identify the window we want up front, by converting the info from WindowInfo into an ID string
				Is this logic something that should just live in WindowInfo, as a "find ID for window matching me"?
					And/or should the actual core logic be in something like WindowLib, as a "find ID for window matching this info"
						That way it's not limited to WindowInfo instances
						On the other hand, we could just use WindowInfo as our data structure for "window identifying info"
					Regardless of where the logic goes, could it replace/be used by Config.findWindowInfo()?
	Consider making copy-to-new-notepad set the value based on existence instead of becoming active
		What if there are multiple notepad instances, though?
	Git setup - figure out what the recent changes from the work setup tutorial were, and whether they matter for my purposes
		git config --global pull.rebase true
		git config --global merge.ff false
		git config --global fetch.prune true
	activateWindowUnderMouseAndSendKeys() - would it be faster to check if the window is one of the specific ones we're checking for?
		That way it doesn't have to loop through all of the window definitions, right?
	Reexamine script division in general folder (except hotstrings, those are fine)
		New plan
			epic
				Selector TLG/DLGs
				Selector Hyperspace
				Selector environment ID
				Selector Snapper
				Selector Thunder
				Selector VDI
				Selector phone
			media
				Volume up/down
				Mute toggle
				Change media player
				SoundSwitch
				Media keys
			places
				Open specific folders
				Selector folder
				Clean path/parent path
				Open specific websites
				Selector edit file
			selection
				Generic search
				Generic open
				Generic copy link
				Generic hyperlink
				Hyperlink selected text
				Copy selected text into a new notepad instance
			system
				Mute-lock
				AppsKey-Windows key
				Computer sleep
				Computer lock
				Suppress extra buttons
				Browser back/forward clicks
				Release all modifiers
			text
				Send raw clipboard
				Send hyperlinked text/url combo
				Send standard object string
				Send clipboard as a formatted list
				Selector symbols
			window (actions on a particular window)
				Action select all
				Action delete word
				Action escape
				Action backtick
				(Action) minimize window
				Always on top
				Center window
				Fake-maximize window
				Selector resize
				Horizontal scrolling (except in a couple of specific programs)
					Could we have those programs let the hotkeys through instead?
						Would using ~ prefix override the general bit?
				Extra mouse buttons-tab switch (except in a couple of specific programs)
					Same as above, could those programs handle it instead?
	Get rid of Messenger, Github Desktop scripts if I don't use them for something new soon
	Teams: could we make the mute/video toggles, universal hotkeys?
		Based on existence of Teams window with meeting running
			Title with meeting running: Meeting | Microsoft Teams
			Looks like this should work even once the window is closed (minimized to tray)
	Is the media player stuff in config worth keeping around? I don't really switch music programs anymore, and Chrome awkwardly tries to grab media keys anyway.
		Possibly replace it with something based on RDP/Spotify command script, that interacts directly with Spotify instead of letting other things steal the media keys?
		Wait until a little after WFH stuff is done to decide.
	Allow opening routines in EpicStudio in an environment other than DBC Dev (mainly to allow CDE)
		Probably a new (optional) data element throughout ActionObject* (and a new column in actionObject.tls)
			Do we want free-text input (to match on epicEnvironments TLS, presumably?)
		Alternative idea: just have ActionObjectEpicStudio launch the epicEnvironments selector before it opens/links, so I can pick the environment
			Wouldn't this be annoying to do all the time, though?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Is there some way to fix Spotify placement at startup?
		It ends up too low (probably because of my taskbar on top), and sometimes the taskbar button thinks it's on the wrong monitor
			The monitor bit probably doesn't matter, considering I close it (min to tray) pretty shortly after
				Would closing it (min to tray) and then re-opening it be an option to fix the monitor tasbar bit?
	Figure out some standard documentation method for hotkeys
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show popup with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
		Somehow measure the width a field would need to be to fit its description comfortably
			Or does that happen automatically if you add it with a value?
		Maybe include an additional buffer on the end?
			Maybe make it optional with an overall setting?
		What about column widths, in a new top-level line like we have for field order/whether to show?
			Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
	
# Toast
	Could we avoid flickering between .showPersistent() and .setText()?
		Maybe some way to set position without showing?
		It's kind of strange that .setText() shows the toast if it's hidden - could we avoid that, or is it required by Toast framework?
	Figure out how to deal with Toast/VisualWindow issue where upper-right toasts jump to the next monitor over
		Happens if they're anchored to right edge and then their text gets longer by enough.
		Looks like the issue is that we make the toast bigger enough that Windows decides it's on the next monitor
			We create a new VisualWindow each time we want to move the Toast
				Maybe we should have a persistent one instead?
			The actual resizing (via Gui, Show with AutoSize) happens in Toast.move()
				What if we create the VisualWindow earlier (before the AutoSize) and somehow use that to save off or anchor the Toast to the current monitor?
		When we fix this, we can update:
			iconTester.ahk - don't need a toast message up front, can be blank to start and we can just call switchToIconWithNum(0) instead of getting the text
			updateNotepadPPAHKSupport
	