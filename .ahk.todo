# New Ideas
	Add some ability to call into logic on exit using CommonHotkeys' !+x hotkey
		Use case: colorPicker needs to restore cursors on exit
	Defaulting values into a potentially-populated variable - dig into options a little more, is there something better than our current coalesce?
		Ideas
			x := DataLib.coalesce(x, this.X_Centered)
			x := x.defaultIfBlank(this.X_Centered)
			if(x = "")
				x := this.X_Centered
			x := (x != "") ? x : this.X_Centered
	Would it make sense to have some of my custom GUIs extend VisualWindow, rather than having them create or track one separately?
	Should we open DebugPopup/DebugTable up a bit, for use outside of Debug.popup/toast?
		Maybe a DebugPopup analog that just uses TextTable, instead of DebugTable?
			Or could we turn DebugPopup into something (TextPopup?) that takes (or lets you pick between, or lets you override a default) a TextTable instance (dependency-injection style)?
		We're using it in several places that aren't really debug now:
			findProjectInSolutionsFolder
				Title: Found projects in solutions folder
				Content: more or less the same
			Onenote recurring todo peek
				Title: Recurring todos peek
				Content: Each day as if it were an independent array
					For this, we'd need to open up DebugPopup to adding individual lines, not just all the content at once - is that a problem?
					This would allow us to add rows in the order we wanted - so we could flip the date order back to day-date, not date-day
	Re-examine how we run programs and such (RunLib.runAsUser stuff) - could it be the reason we have focus issues?
		Also, could we work around it with a WinWaitExist + WinActivate?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Figure out some standard documentation method for hotkeys
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show popup with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	Is the media player stuff in config worth keeping around? I don't really switch music programs anymore, and Chrome awkwardly tries to grab media keys anyway.
		Possibly replace it with something based on RDP/Spotify command script, that interacts directly with Spotify instead of letting other things steal the media keys?
		Wait until a little after WFH stuff is done to decide.
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
		Somehow measure the width a field would need to be to fit its description comfortably
			Or does that happen automatically if you add it with a value?
		Maybe include an additional buffer on the end?
			Maybe make it optional with an overall setting?
		What about column widths, in a new top-level line like we have for field order/whether to show?
			Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
	
# Toast
	Could we avoid flickering between .showPersistent() and .setText()?
		Maybe some way to set position without showing?
		It's kind of strange that .setText() shows the toast if it's hidden - could we avoid that, or is it required by Toast framework?
	