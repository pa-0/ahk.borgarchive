# New Ideas
	VPN resize option seems like it has to be relative to middle monitor - should it?
		If I want it to be relative to the monitor, do I need to use one of the special values instead?
	Consider turning backtick key into a new window action - I'm using it as an escape replacement in a number of places now
		Messenger
		GitHub Desktop
		...
	With new EMC2 version, do I need to add more specifications (probably ahk classes?) to various EMC2 windows?
	Hotkey for automatically breaking up documentation lines to 100 chars wide
		Possibly reconsider the 100-char limit - wouldn't wider make more sense?
		Could take into account whether there would be only 1 small word moved down
		Could handle multiple line breaks
	Is the media player stuff in config worth keeping around? I don't really switch music programs anymore, and Chrome awkwardly tries to grab media keys anyway.
		Possibly replace it with something based on RDP/Spotify command script, that interacts directly with Spotify instead of letting other things steal the media keys?
	Allow opening routines in EpicStudio in an environment other than DBC Dev (mainly to allow CDE)
		Probably a new (optional) data element throughout ActionObject* (and a new column in actionObject.tls)
			Do we want free-text input (to match on epicEnvironments TLS, presumably?)
		Alternative idea: just have ActionObjectEpicStudio launch the epicEnvironments selector before it opens/links, so I can pick the environment
			Wouldn't this be annoying to do all the time, though?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Is there some way to fix Spotify placement at startup?
		It ends up too low (probably because of my taskbar on top), and sometimes the taskbar button thinks it's on the wrong monitor
			The monitor bit probably doesn't matter, considering I close it (min to tray) pretty shortly after
				Would closing it (min to tray) and then re-opening it be an option to fix the monitor tasbar bit?
	Figure out some standard documentation method for hotkeys
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show popup with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	
# Toast
	Could we avoid flickering between .showPersistent() and .setText()?
		Maybe some way to set position without showing?
		It's kind of strange that .setText() shows the toast if it's hidden - could we avoid that, or is it required by Toast framework?
	Figure out how to deal with Toast/VisualWindow issue where upper-right toasts jump to the next monitor over
		Happens if they're anchored to right edge and then their text gets longer by enough.
		Looks like the issue is that we make the toast bigger enough that Windows decides it's on the next monitor
			We create a new VisualWindow each time we want to move the Toast
				Maybe we should have a persistent one instead?
			The actual resizing (via Gui, Show with AutoSize) happens in Toast.move()
				What if we create the VisualWindow earlier (before the AutoSize) and somehow use that to save off or anchor the Toast to the current monitor?
		When we fix this, we can update:
			iconTester.ahk - don't need a toast message up front, can be blank to start and we can just call switchToIconWithNum(0) instead of getting the text
			updateNotepadPPAHKSupport
	