# New Ideas
	TableList mods - consider making it a replacement by default (only 1 active mod), only stack with labels
		Use case: onenote todos, dailies section could be more compact
	Update Notepad++ AHK documentation stuff to handle properties (with or without [])
		Properties with parameters, too - maybe just treat [] the same as ()?
	Figure out what to do about cleanupPath() dropping (valid) quotes from the end of URLs
		Separate cleaning for URLs?
			How to sense? Using ActionObjectPath?
		Should we integrate this into ActionObjectPath instead? Is that overkill?
		Another option: a new Path class, that ActionObjectPath just uses?
	With new discovery about chaining constructors to single call afterwards (i.e. 'data := new Selector("filepath").selectGui()'), do we still need the static side of Toast?
		Would it be cleaner to just have callers use 'new Toast().*' instead?
		Could compensate on the length by dropping the "show" from the start of showShort/showMed/showError
	Consider changing the approach for hyperlinker a bit
		Have OneNote, others that need special handling do it themselves somehow
		Ideas:
			Passing in a BoundFunc
			Just having a function with the right name
				Would require a mapping from window name to class where function lives
			Have programs that need special handling call into the logic themselves and handle special logic
	Standardize how we format & structure classes
		Capitalization (public vs private)
		Startup/default values
			Selector > guiSettings
			Hyperlinker > windows
			Toast > styles
			WindowActions > actionOverrides
		Square brackets on properties (that don't take parameters)
	Make dbpop handle commas within quotes/parens?
	Could we do something more consistent for some of the social windows (Telegram, Teams, etc.), where we can somehow just send an escape keystroke instead of closing?
		Consistent hotkey (backtick, perhaps)?
		Add a double-escape window action for closing (for use in these cases), instead of just closing on first Escape (probably a pass-through hotkey with ~)
	Hotkey for automatically breaking up documentation lines to 100 chars wide
		Could take into account whether there would be only 1 small word moved down
		Could handle multiple line breaks
	Allow opening routines in EpicStudio in an environment other than DBC Dev (allow CDE)
		Options:
			New column in actionObject.tl for environment (would also allow us to expand codesearch routine option)
			New type of codesearch type with separate branch in ActionObject (not ideal)
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Consider adding a client-file-viewing search to either search selector or actionObject (like codesearch routine)
	Add some way to move windows where I want them
		Hotkey-triggered, for all windows in list?
		Maybe lean on monitor fixer script from before?
		Make sure monitor exists before putting a window there
		Spotify
			Switch to other monitor, then correct one
			At home: move to correct height (not cut off)
		Work
			KDiff window - maximize on center screen
			MatterMost - half of left screen
		Telegram - left monitor, top or bottom depending on machine
		Pidgin window - top-right of left monitor
	
# Selector/TableList
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	Consider adding a way to match on some other column than just NAME and ABBREV
		Use cases
			Transaction dump all script, to get name from epicEnvironments TLS instead of just using COMMID
				Alternatively, build out environments in Config (though only if Epic machine) so we can retrieve specific data from it like we do windows, etc.
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow (across columns), with next field being empty or placeholder'd
	Consider reading in more .tl/.tls files at startup and caching them
		Alternatively, cache them after the first use?
			Basically static variables, like we're doing in Hyperlinker
	
# Toast
	Add some way to auto-sleep until the toast hides itself
		At the least, have constants for short/medium/long lengths of time so they can be sync'd
			Do those also need to take into account the fade in/out times, though?
				May be too negligible to matter
		Use case: when scripts are displaying a result before they exit:
			copySourceToPersonalFolder
			iconTester
			firstSetup (could add, would look nicer for VDI case)
			colorPicker (trickier - not calling toast directly, but via clipboard set/toast stuff)
	Could we avoid flickering between .showPersistent() and .setText()?
		Maybe some way to set position without showing?
		It's kind of strange that .setText() shows the toast if it's hidden - could we avoid that, or is it required by Toast framework?
	Figure out how to deal with Toast/VisualWindow issue where upper-right toasts jump to the next monitor over
		Happens if they're anchored to right edge and then their text gets longer by enough.
		Looks like the issue is that we make the toast bigger enough that Windows decides it's on the next monitor
			We create a new VisualWindow each time we want to move the Toast
				Maybe we should have a persistent one instead?
			The actual resizing (via Gui, Show with AutoSize) happens in Toast.move()
				What if we create the VisualWindow earlier (before the AutoSize) and somehow use that to save off or anchor the Toast to the current monitor?
		When we fix this, we can update:
			iconTester.ahk - don't need a toast message up front, can be blank to start and we can just call switchToIconWithNum(0) instead of getting the text
	Do we want to add negative x/y values to mean how far off of the right/bottom to be?
		Would let us say, implement timer to be like the Windows media tile
	
# Documentation
	Figure out some central documentation method
		Dynamically pull hotkeys for the currently focused program?
		Hotkey to show window with all currently active hotkeys, divided up into current-program-specific and others
			Maybe separate section for stuff that runs when some other window exists (media hotkeys, for example)
	common
		classes
			config
			listConverter
			selectorGui
		functions
			clipboard
			data
			dateTime
			epic
			file
			gui
			io
			runCommands
			string
	sub
		killUAC
		vimBindings
	standalone
		halfQWERTY
		psxEmulatorController
	