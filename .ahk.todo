# New Ideas
	Figure out why escape-closing stops working after long enough
		Happens to Telegram for sure, but also Explorer?
		Based on debug toasts, I'm pretty sure it's no longer identifying windows by name properly - probably some sort of local variable gets dumped or overwritten?
		Next step: add some sort of debug flag or something to try and see what's missing/going on in Config
			Or: system.ahk::testFunc()
	Consider some (probably Selector-based) way to automatically generate the usual relative-path solution shortcuts in a DLG folder
		Probably triggered by a hotkey in the DLG folder in Explorer
		Selector of usual options - DBC, EyeCare (IProc), ChargeEntry, ChargeCapture, OrderingActivity
			Probably also an option to open the solutions folder (or just create a relative link to it?)
	For ActionObjectCodeSearch, consider reading fileName.cs::functionName() and turning it into an appropriate link (function into search query, the rest into the name filter text like we already do).
	Could we make linking hotkey more reliable by generating an (RTF?) link on the clipboard and pasting it, rather than relying on the linking popups?
		Might only work in certain contexts.
	SelectorGui is very slow lately - could we speed it up somehow?
		Might be a question of switching to built-in Gui positioning options as mentioned below?
	ActionObject: would it make sense to always compare the "first word" of the given value to the TLS?
		Would make stuff like the helpdesk and SVN handling work without needing a separate function
			SVN handling in particular would be nicer because we can get the repo URL from the TLS instead of having to get it out of privates.
		Potentially tricky bit: pre-processing we do for EMC2 records (with their additional title and whatnot)
			We could theoretically just run that a second time, though.
	Could I use hotstrings to about stuff like (i.e. xxx) from capitalizing incorrectly?
	Clean out OneNote recurring todo stuff - no longer used
	Consider a "record macro" set of hotkeys (like Notepad++ has built-in).
	Is there some way I could detect and show a warning when a modifier key gets stuck down?
		Maybe start a timer when one of them is held down, and after 5s or so show a persistent toast that goes away when it's released?
		Could take the physical vs. virtual state into account (GetKeyState(key) vs GetKeyState(key, "P")) - only care when virtually but not physically held
	Consider adding something mover-sizer-based for closing windows (original had something like double-middle-click or something, I think?)
	Config: is it worth keeping .Init()?
		TableList automatic filters - where should those live?
		.initDone/.isInitialized stuff - just used by debug, worth keeping?
			Would it be better to have the "early" debug popup/toast show up based on whether CommonHotkeys has been initialized?
				Would let us potentially make stuff that's NOT early specific to a type of script (i.e. only show it for the main script)
			Could we just replace it with a public flag (or public setter to a private flag, whatever) on Debug, so that the script itself could decide where the cutover point is?
	Consider switching zoom mute toggle over to a click target within the zoom window - would that avoid the "ding" sound?
	CodeSearch: looks like the URL can include the full path now, could we use that to open in client instead of the search approach?
	Re-examine how we run programs and such (RunLib.runAsUser stuff) - could it be the reason we have focus issues?
		Also, could we work around it with a WinWaitExist + WinActivate?
	EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	
# Selector
	Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
		https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
			Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
			wp/hp/x+n/y+n for sizing/positioning relative to last control
			x+m/y+m to use margin value
			xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
				Can use +n/-n for these as well
		If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
			Would need some way to figure out the max width of all text that WILL BE in a given column
			OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
		Current functionality I'd want to duplicate:
			Popup behavior
				Size to contents (but ideally only to a point, then maybe scroll?)
				No max/min buttons
				Custom background/text colors
				Grayed-out fields when default values (labels as "ghost" text, color changes live)
				Enter to submit
				Esc to cancel
				Choice field focuses on startup
			Content sizing
				10px margin around main content
				Specific padding between elements (5px index-abbrev, 10px abbrev-name, 5px between override fields, 30px between columns)
				Dynamic widths for index/abbrev (if possible - current behavior is 25px index, 50px abbrev) and name (actually dynamic 	right now)
				25px line height (on choices)
				24px field height
				First field width
					If no overrides: full width
					If overrides: index width + abbrev width (+ padding between)
				Override field widths span remaining width equally
				Sections (header + empty line at end)
		Make sure to update Selector/SelectorGui documentation if stuff changes
	Dynamically resize abbreviation column based on widest value?
		To allow longer abbreviations
		Is that going to get weird with SelectorGui+FlexTable interactions?
	The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
		Somehow measure the width a field would need to be to fit its description comfortably
			Or does that happen automatically if you add it with a value?
		Maybe include an additional buffer on the end?
			Maybe make it optional with an overall setting?
		What about column widths, in a new top-level line like we have for field order/whether to show?
			Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
	