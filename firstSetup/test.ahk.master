{ ; Includes, other here-to-stay auto-execute things.
	#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
	SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
	SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.
	; #NoTrayIcon
	#SingleInstance force
	
	#Include <autoInclude>
	
	; State flag and icons
	global suspended := 0
	setUpTrayIconsSimple("suspended", "icons\testGreen.ico", "icons\testRed.ico")
}

; --------------------------------------------------------------------------

; Any specific auto-execute things that are needed go here.


; --------------------------------------------------------------------------

^b::
	
return

;^h::
;	; Get user input.
;	FileSelectFile, fileName
;	
;	list := TableList.parseFile(fileName)
;	DEBUG.popup(list, "Parsed List")
;return

; --------------------------------------------------------------------------
{ ; Hotkeys that don't change.
	; Hotkey to open test.ahk for editing.
	^+e::
		editScript(A_LineFile)
	return
	
#IfWinActive, ahk_class Notepad++
	; Auto-reload this script when it's saved.
	~^s::
		; Suspend, Permit ; Allow this to run when the script is suspended.
		WinGetActiveTitle, winTitle
		if(stringContains(winTitle, A_ScriptFullPath))
			Reload
	return
#IfWinActive
	
	F1::
		rows := []
		
		WinGetClass, currClass, A
		WinGetTitle, currTitle, A
		currControl := getFocusedControl()
		tooltipText := getTooltipText()
		
		; DEBUG.popup("Class", currClass, "Title", currTitle, "Control", currControl, "Tooltip text", tooltipText)
		
		rows.Insert(new SelectorRow("", "Class",   "c", currClass,   true))
		rows.Insert(new SelectorRow("", "Tooltip", "t", tooltipText, true))
		rows.Insert(new SelectorRow("", "Title",   "i", currTitle,   true))
		rows.Insert(new SelectorRow("", "Control", "o", currControl, true))
		
		s := new Selector()
		s.setChoices(rows)
		textToCopy := s.selectGui()
		
		if(textToCopy) {
			clipboard := textToCopy
			DEBUG.popup("Copied to clipboard", textToCopy)
		}
	return
	
	F6::
		WinGetClass, currClass, A
		WinGetTitle, currTitle, A
		ControlGetFocus, currControl, A
		DEBUG.popup(currClass, "Class", currTitle, "Title", currControl, "Control")
	return
	F7::
		WinGetClass, currClass, A
		clipboard := currClass
	return
	F8::
		WinGetTitle, currTitle, A
		clipboard := currTitle
	return
	F9::
		clipboard := getFocusedControl()
	return
	
	!XButton1::
	!XButton2::
		clipboard := getTooltipText()
		DEBUG.popup("Tooltip text", clipboard)
	return
}

{ ; Exit/reload hotkeys.
	~#!x::
		Suspend
		suspended := !suspended
		updateTrayIcon()
	return

	; Exit, reload, and suspend.
	~!+x::ExitApp
	; ~#!x::Suspend
	^!r::
	~!+r::
		Suspend, Permit
		Reload
	return
}
