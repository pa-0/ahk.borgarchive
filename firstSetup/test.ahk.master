{ ; Includes, other here-to-stay auto-execute things.
	#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
	SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
	SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.
	#SingleInstance force
	#Include <includeCommon>
	setCommonHotkeysType(HOTKEY_TYPE_Standalone)
	setUpTrayIcons("testGreen.ico", "testRed.ico")
	DetectHiddenWindows, On
}

; --------------------------------------------------------------------------

; Any specific auto-execute things that are needed go here.


; --------------------------------------------------------------------------

^b::
	
return

^+b::
	
return

; --------------------------------------------------------------------------
{ ; Hotkeys that don't change.
	
	; Hotkey to open test.ahk for editing.
	^+e::
		editScript(A_LineFile)
	return
	
	F1::
		toastAllWindowInfo() {
			winId := WinGet("ID", "A")
			name := MainConfig.findWindowName()
			WinGetClass, winClass, A
			WinGetTitle, title, A
			tooltipText := getTooltipText()
			currControl := ControlGetFocus("A")
			
			DEBUG.toast("ID",winId, "Name",name, "Class",winClass, "Title",title, "Tooltip Text",tooltipText, "Current Control ID",currControl)
		}
	
	F2::
		selectWindowInfo() {
			s := new Selector("testWindowInfo.tls")
			infoAry := s.selectGui()
			key      := infoAry["KEY"]
			keyLabel := infoAry["NAME"]
			
			if(key = "ID") {
				textToCopy := WinGet("ID", "A")
			} else if(key = "NAME") {
				textToCopy := MainConfig.findWindowName()
			} else if(key = "CLASS") {
				WinGetClass, textToCopy, A
			} else if(key = "TITLE") {
				WinGetTitle, textToCopy, A
			} else if(key = "TOOLTIP") {
				textToCopy := getTooltipText()
			} else if(key = "CONTROL") {
				textToCopy := ControlGetFocus("A")
			}
			
			setClipboardAndToastValue(textToCopy, StringLower(keyLabel))
		}
	
	!XButton1::
	!XButton2::
		setClipboardAndToastValue(getTooltipText(), "tooltip")
	return
}

#Include <commonHotkeys>
