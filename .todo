'Selector'
	Parameter changes
		Constructor - move tlSettings to 3rd param (understandable to keep for others, but currently completely unused)
		Add returnColumn to all
		Replace guiSettings["Icon"] (used only by 3 of the doSelect calls that use epicEnvironments.tl) with guiSettings["WindowTitle"]
	Reconsider doSelect
		Turn into Selector.doSelectGuiSimple or similar - convenience function that creates a Selector and such. Parameters:
			filePath
			returnColumn
		Will end up kicking the three icon users to use .selectGui (with new guiSettings["WindowTitle"] option), but that's fine.
	Callers
		doSelect (no settings except icon param)
			firstSetup
				All
			snapper > sendChroniclesStatusItemsToIgnore
				Single
			launch > selectOutlookTLG
				All
			launch > selectHyperspace
				All, icon
			launch > selectEnvironmentId
				Single
			launch > selectThunder
				All, icon
			launch > selectVDI
				All, icon
			launch > phoneSelector
				All
			launch > selectResize
				All
			launch > configSelector
				Single
		selectGui+selectChoice
			epic > processEMC2ObjectInfo
				Single, guiSettings (ShowOverrideFields)
			file > selectFolder
				Single, no settings, filter
		selectGui
			test/.master > selectWindowInfo
				Single, no settings (but setChoices)
			launch > snapperSelector
				All, defaultData, guiSettings (Icon, ShowOverrideFields, ExtraDataFields)
			launch > prjSelector
				Single, guiSettings (ShowOverrideFields)
			launch > genericSearch
				All, defaultData, filter
		selectChoice (no settings)
			epic > getTrueINI
				Single
	Rework SelectorRow
		Remove unused: userInput, buildSelectorRow()
		Reintroduce .name and .abbrev (as properties)
			In constructor, should come from either parameters (if given) or from "NAME"/"ABBREV" subscripts of data array
			Have launchSelectorPopup() use .name/.abbrev instead of .data["NAME"]/.data["ABBREV"]
	Turn launchSelectorPopup() into doSelectGui() instead
		Takes defaultData input
		New class for popup
			Constructor takes needed info, builds the thing with (private) .build()
			.show() shows the popup, including waiting on it to be closed
			.getChoiceQuery(), .getOverrideData()
		Handle data summing as before, return finished data array
	Switch test script over to just using a TL to decide which thing they want
		Put different pieces in an array, select the index into that array.
	Make the default 3rd column "VALUE" instead of "DOACTION"
		Update places that use "DOACTION"
			At least test.ahk/.master
	Rework Selector documentation
	
'Fixes'
	Take another look at genericSearch(), make sure we really need to do the forceArray() stuff
		Probably tweak the loop or pull out a subfunction, too.
	Go back and clean up launch.ahk a bunch with all of the additional logic dumped there from the selector rework
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	
'New'
	Link for Onenote, that if there's an ID in the "Investigation - QAN # [edit]" string, puts in both links (QAN # gets web, edit gets edit)
	Make a smaller subset of scripts that can run in VDIs?
		AHK is already installed (and latest version at that!)
	Centralize format-as-code hotkey (^+c) like we did for hyperlinking selected text?
	Add some way to show progress for long-running scripts - maybe using a tooltip, or toast library from below?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
'Documentation'
	Debug
	Selector
		Settings passed in programmatically
	MainConfig and windows.tl support for RegEx in titles ({REGEX})
