'Selector'
	Split the actual GUI building logic for SelectorGui out into yet another class (GuiBuilder)?
		Maybe only for the choice-adding logic?
			Fields and such don't really need the same sort of tracking - just a single field or a row of them.
			Name more like (Gui)TableBuilder?
				FlexTable (flexible table, can break across into columns)?
		Would maintain internally:
			Current column X
			Current X (at END of last-added element, relative to current column X)
			Current Y
			Whether is first line in column (replacement for lineNum)
			Max X ever (for getTotalWidth)
			Max Y ever (for getTotalHeight)
		Public functions:
			__New(guiId, x, y, lineHeight, columnPadding)
				Store off starting points and info
				Initialize current, max values
			newHeaderRow(text)
				this.newRow()
				Apply styling
				Gui, Add, Text
				Revert styling
			newRow()
				Increment Y by lineHeight
				Update max Y
			addCell(text, width)
				Gui, Add, Text
				Update current X using cell width (width calculated if not given)
				Update max X
			newColumn()
				Set new column X offset (using current max X value + columnPadding)
				Update max X
			getTotalHeight()
				Returns max Y ever - starting Y
			getTotalWidth()
				Returns max X ever - starting X
		Make sure to call makeGuiTheDefault as needed before doing stuff with this new class.
	Get rid of guiSettings["ExtraDataFields"] storage - just take it in and add it to dataIndices (dataFields).
	Get rid of RowsPerColumn - new column stuff should be explicit by TL file.
	ShowOverrideFields
		Get rid of setting from file - rely on whether there's a ) index row instead
		Programmatically, should only need a parameter to suppress it, not turn it on
			Need to make sure that dataIndices gets created when adding additional fields (basically just Snapper case)
		Remove guiSettings["ShowOverrideFields"] subscript
			Just check if this.dataIndices (but rename to this.overrideFields) is populated (so just if(this.dataIndices)?) instead
	Turn launchSelectorPopup() into doSelectGui() instead
		Takes defaultData input
		New class for popup
			Constructor takes needed info, builds the thing with (private) .build()
			.show() shows the popup, including waiting on it to be closed
			.getChoiceQuery(), .getOverrideData()
			All Gui stuff (including gui ID) move into that
		Handle data summing as before, return finished data array
	Consider switching getSpecialChars() stuff in selector to setSpecialChars (with overrides if possible) like selectorGui
	Rework SelectorRow
		Remove unused: userInput, buildSelectorRow()
		Can we split constructor into two separate things?
			Array version, individual values + data version
		Reintroduce .name and .abbrev (as properties)
			In constructor, should come from either parameters (if given) or from "NAME"/"ABBREV" subscripts of data array
			Have launchSelectorPopup() use .name/.abbrev instead of .data["NAME"]/.data["ABBREV"]
	Possibly make "ghost text" data labels in fields a different text color?
		Could change based on event that happens when edit field contents are changed
	Updates in actionObject before we switch over (since defaultOverrideData passed in that isn't visible won't make it out)
	Rework Selector documentation
	
'Fixes'
	Take another look at genericSearch(), make sure we really need to do the forceArray() stuff
		Probably tweak the loop or pull out a subfunction, too.
	Go back and clean up launch.ahk a bunch with all of the additional logic dumped there from the selector rework
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	
'New'
	Selector of current DLGs?
		Could move PRJ stuff to this as well.
		Alternatively, could keep this in the TLG TL too?
	Make a kind of snippet list for EpicStudio
		Selector with different kinds of loops (zoID,zoDAT,various index versions, etc.), and override fields for iterator variable, levels down, etc.
		Similar to for loop hotstring
	Find a better way to keep AHK todo list?
		This technically works, but it's weird to have to do commits just to record ideas to do.
		Ideas:
			Third-party, syncing todo app
			Put it in the private repo (hosted on home server)?
		Possibly also make syntax highlighting nicer: http://www.gottabegarabi.com/blog/todo-a-simple-todo-list-color-scheme-for-notepad/
			Would want to figure out how to add collapsing/expanding based on indentation (like Python, which is current thing I use).
	Use toast (or tooltip if that doesn't work out) to show when something was copied to clipboard by a hotkey
		OneNote page link, Chrome title copy, various Test copies (instead of popup)
	Make keypresses (maybe just Space?) delay OneNote page copying logic (so I can make it wait until new page appears), 1 second at a time?
	Link for Onenote, that if there's an ID in the "Investigation - QAN # [edit]" string, puts in both links (QAN # gets web, edit gets edit)
	Make a smaller subset of scripts that can run in VDIs?
		AHK is already installed (and latest version at that!)
	Centralize format-as-code hotkey (^+c) like we did for hyperlinking selected text?
	Add some way to show progress for long-running scripts - maybe using a tooltip, or toast library from below?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
'Documentation'
	Debug
	Selector
		Settings passed in programmatically
	MainConfig and windows.tl support for RegEx in titles ({REGEX})
