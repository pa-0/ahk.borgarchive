# Fixes
	Take another look at genericSearch(), make sure we really need to do the forceArray() stuff
		Probably tweak the loop or pull out a subfunction, too.
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	Should we have various places referencing EMC2/Hyperspace just use MainConfig things like getWindowSetting("NAME") instead of explicit EXEs?
	Rename various "contains" functions to be clearer in their distinction?
		arrayContains vs just contains
		stringContains
		isInArray
	
# New
	Toast
		Add ability to update text (and auto-resize toast)?
			Update firstSetup's file copying stuff to use this if we do it.
			Also, should we get rid of toastText parameter to constructor, then?
				Just have one on .show instead, + new function to replace/update text?
			Maybe split fade-out from close/destroy (infinite-time callers will need to call destroy directly)
				Make close/destroy also fade things out?
					Only if not already fully transparent
		Use toast (or tooltip if that doesn't work out) to show when something was copied to clipboard by a hotkey
			OneNote page link, Chrome title copy, various Test copies (instead of popup)
		Use to add visual indicator that we're waiting for x amount of time, and if the user presses the y key, we'll wait some more (update toast message accordingly when we roll around).
			OneNote now, but maybe more later?
	Use Gui, New for selectorGui?
		Destroys an old one if it exists.
		Would need to use hwnd as guiId (where hwnd is already the ahk_id thing)
		Would let us get rid of getNextGuiId()
		Can we also use "Gui, Show, AutoSize Hide"?
	Allow programs.tl and windows.tl to use tags for user path, etc.?
	Add some way to move windows where I want them
		Hotkey-triggered, for all windows in list?
		Maybe lean on monitor fixer script from before?
		Make sure monitor exists before putting a window there
		Spotify
			Switch to other monitor, then correct one
			At home: move to correct height (not cut off)
		Work
			KDiff window - maximize on center screen
		Telegram - left monitor, top or bottom depending on machine
		Pidgin window - top-right of left monitor
	AHK documentation - add hotkey (ctrl+enter or shift+enter, probably) that adds a newline + comment and however many spaces are needed
		Should cut from cursor to end of line to start (so we don't lose that spot)
		Could copy existing line, look for first instance of more than once space
			Indentation should be tabs, only one space before labels
	Consider changing TableListMod format
		Make COLUMN required?
		Allow r/R/replace/Replace/REPLACE vs only r
		Don't have the column in {} at the beginning - hard to read. Alternatives:
			COLUMN.op(TEXT) - Make it the owner of the action
			op(COLUMN,TEXT) - Make it like an argument to the action
				Not as clear the distinction between column and text
		TLs that use mods:
			search
			windows
			programs
			actionObject
			configs
			mappedDrives
	Should we have windows > activateProgram wait for window to be active after running?
		Possibly activate it itself after a timer if it's not active but exists?
	Make a kind of snippet list for EpicStudio
		Selector with different kinds of loops (zoID,zoDAT,various index versions, etc.), and override fields for iterator variable, levels down, etc.
			Since each choice will have to be implemented explicitly, have programmatic choices?
				Would need to add programmatic choices back into Selector first.
		Similar to for loop hotstring
	Find a better way to keep AHK todo list?
		This technically works, but it's weird to have to do commits just to record ideas to do.
		Ideas:
			Third-party, syncing todo app
			Put it in the private repo (hosted on home server)?
	Set up AHK to run in VDIs
		AHK is already installed (and latest version at that!)
		Will want to use separate "admin" startup script (that runs as admin)
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script ) and pull out anything interesting
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	Consider turning the various window actions into a separate class? WinActions, maybe?
		Could read stuff in itself, MainConfig would call
			All windows' info stored in static variables (like in MainConfig)
	Consider moving activateProgram/runProgram and related functions into MainConfig?
		Behavior is based entirely on data from MainConfig.
	
# Documentation
	common
		data
		dateTime
		debug
		debugBuilder
		epic
		file
		gui
		iniObject
			Technically from outside source, but so simple...
		io
		mainConfig
			Particularly windows.tl support for RegEx in titles ({REGEX})
		runCommands
		selectorGui
		string
		window
	program
		emc2
		epicStudio
			Reconsider debug functions
		excel
		hyperspace
		outlook
		putty
		snapper
		vb6
	standalone
		halfQWERTY
		reversePhoneSearch
			Make sure this still works
		killUAC
		psxEmulatorController
		vimBindings