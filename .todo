'Selector'
	Stop using selectorActions
		Switch places that use selectorActions to instead use RET_DATA and do it themselves
			select* wrappers around what we actually do - selectResize, selectCall, selectTimer, etc.
	Make Selector always return data, no longer perform any action
		Move handling for opening .tl files (+e) up out of doAction()
			Probably just before we return the data
		Stop calling doAction() and get rid of it
		Get rid of selectorActions script entirely
	Rework SelectorRow
		Remove unused: userInput, isDebug, buildSelectorRow()
		Reintroduce .name and .abbrev (as properties)
			In constructor, should come from either parameters (if given) or from "NAME"/"ABBREV" subscripts of data array
			Have launchSelectorPopup() use .name/.abbrev instead of .data["NAME"]/.data["ABBREV"]
	Turn launchSelectorPopup() into doSelectGui() instead
		Takes defaultData input
		New class for popup
			Constructor takes needed info, builds the thing with (private) .build()
			.show() shows the popup, including waiting on it to be closed
			.getChoiceQuery(), .getOverrideData()
		Handle data summing as before, return finished data array
	
'Fixes'
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	
'New'
	Make a smaller subset of scripts that can run in VDIs?
		AHK is already installed (and latest version at that!)
	Centralize format-as-code hotkey (^+c) like we did for hyperlinking selected text?
	Add some way to show progress for long-running scripts - maybe using a tooltip, or toast library from below?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
'Documentation'
	Debug
	Selector
		Settings passed in programmatically
	MainConfig and windows.tl support for RegEx in titles ({REGEX})
