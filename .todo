'Selector'
	Turn launchSelectorPopup() into doSelectGui() instead
		Takes defaultData input
		New class for popup
			Constructor takes needed info, builds the thing with (private) .build()
			.show() shows the popup, including waiting on it to be closed
			.getChoiceQuery(), .getOverrideData()
		Handle data summing as before, return finished data array
	Match or at least standardize/allow both for this.guiSettings stuff read from file vs. passed in via guiSettings
	Rework Selector documentation
	Rework SelectorRow
		Remove unused: userInput, buildSelectorRow()
		Can we split constructor into two separate things?
			Array version, individual values + data version
		Reintroduce .name and .abbrev (as properties)
			In constructor, should come from either parameters (if given) or from "NAME"/"ABBREV" subscripts of data array
			Have launchSelectorPopup() use .name/.abbrev instead of .data["NAME"]/.data["ABBREV"]
	
'Fixes'
	Take another look at genericSearch(), make sure we really need to do the forceArray() stuff
		Probably tweak the loop or pull out a subfunction, too.
	Go back and clean up launch.ahk a bunch with all of the additional logic dumped there from the selector rework
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	
'New'
	Find a better way to keep AHK todo list?
		This technically works, but it's weird to have to do commits just to record ideas to do.
	Use toast (or tooltip if that doesn't work out) to show when something was copied to clipboard by a hotkey
		OneNote page link, Chrome title copy, various Test copies (instead of popup)
	Make keypresses (maybe just Space?) delay OneNote page copying logic (so I can make it wait until new page appears), 1 second at a time?
	Link for Onenote, that if there's an ID in the "Investigation - QAN # [edit]" string, puts in both links (QAN # gets web, edit gets edit)
	Make a smaller subset of scripts that can run in VDIs?
		AHK is already installed (and latest version at that!)
	Centralize format-as-code hotkey (^+c) like we did for hyperlinking selected text?
	Add some way to show progress for long-running scripts - maybe using a tooltip, or toast library from below?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
'Documentation'
	Debug
	Selector
		Settings passed in programmatically
	MainConfig and windows.tl support for RegEx in titles ({REGEX})
