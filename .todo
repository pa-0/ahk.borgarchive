# Fixes
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	Take another pass through Selector GUI stuff - seems like there's more options for positioning things now (https://autohotkey.com/docs/commands/Gui.htm#PosSize)
	Check out File.* methods for reading from file (https://autohotkey.com/docs/AHKL_ChangeLog.htm#v1.1.24.04)
	Rewrite halfQwerty so it works and makes more sense
	
# New ideas
	Reconsider data vs dataFilled stuff in Selector - seems like it could be done better.
		Change ShowDataInputs to be something involving overrides - ShowOverrideFields, maybe?
		Doesn't seem like there's a good reason to have user-modified data persist across loops (not that it can anyways)
			Make overrideData only an input parameter?
				Have launchSelectorPopup() return an array of all info
					Can still read from data overrides, and write to data array - but data array is separate (although probably still a copy so non-shown stuff comes through) and is a sub-part of overall returned array:
						retAry["CHOICE_INPUT"]  := userIn
						retAry["OVERRIDE_DATA"] := overrideData
					getDataFromGui should just return an updated array ("" if array would be empty), not true/false with a byref array
	Selector - break launchSelectorPopup() down, maybe turn it into a class of sorts?
		Should take another pass at UI logic with new stuff first, though.
	Add some way to show progress for long-running scripts - maybe using a tooltip or something?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Set up remote git server on CowBox, that local config files can live on and be synchronized to?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
# Scripts to Share

# Documentation
	Debug
	Selector
		Settings passed in programmatically

# Unit Tests
	ActionObject
