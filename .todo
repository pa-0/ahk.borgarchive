# Fixes
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	
# New ideas
	Make a smaller subset of scripts that can run in VDIs?
		AHK is already installed (and latest version at that!)
	Centralize format-as-code hotkey (^+c) like we did for hyperlinking selected text?
	New Selector paradigm
		Selector only returns data array now, no longer actually runs/does things
			Move logic from selectorActions.ahk out into places they call
				Create select* functions where it makes sense - selectResize, selectCall, selectTimer, etc.
		Get rid of debug (+d) behavior entirely
		Always return array of info from choice
			Possibly excluding NAME and ABBREV?
			If we include them, probably should rename - maybe _NAME and _ABBREV?
		Switch data-filling strategy, no longer "backwards" (store off default overrides, then GUI overrides, then apply all to SelectorRow)
			Instead, return one data array, filled in order:
				Default data (goes into data array, any visible fields get filled out of it)
				Data from choice (goes into data array, overwriting any conflicting values)
				Override data from GUI (goes into data array, overwriting any conflicting values)
			Should be able to get rid of defaultOverrideData and overrideData separate things this way
	Selector cleanup
		Reduce SelectorRow, possibly axe it entirely?
			Unused: userInput, isDebug, buildSelectorRow()
			Possible reason to keep: test.ahk (and .master) use constructor as a nice way to build selector of what debug info to copy
				Might be better served by an actual TL and/or just building the arrays of choices, though
			Might also be worth keeping in case GUI rework ends up having them do more GUI-related things
				Could re-introduce .name/.abbrev (but everything else should live under .data still)
			If getting rid of SelectorRow, update things like setting the choices to use arrays instead.
		Get rid of RET_OBJ selectorAction
			Used only by unit testing script
				Should we just get rid of that entirely? It's not really helpful, and never run...
		Break launchSelectorPopup() down, maybe turn it into a class of sorts?
			Could potentially have SelectorRow objects handle their own label placements?
				Or at least have properties for width, height, number, etc.
	Add some way to show progress for long-running scripts - maybe using a tooltip, or toast library from below?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
# Scripts to Share

# Documentation
	Debug
	Selector
		Settings passed in programmatically
	MainConfig and windows.tl support for RegEx in titles ({REGEX})

# Unit Tests
	ActionObject
