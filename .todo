# Fixes
	Update or get rid of timer - formatting, general code cleanup, even functionality?
		Build in selector for times
			Can have hard-coded list of choices to pass in
	Rewrite/clean up coding style for kdeMoverSizer
	Retire mainConfig's setting array functionality - we don't use it anymore.
	
# New ideas
	New selector for editing config files (programs, windows, games, privateInfo, folderTags) that are only used silently?
	Reconsider data vs dataFilled stuff in Selector - seems like it could be done better.
		overrideData seems like it should be a property of the class.
			Probably overrideDataFilled, too.
			Would solve the retAry stuff below.
		Change ShowDataInputs to be something involving overrides - ShowOverrideFields, maybe?
		Doesn't seem like there's a good reason to have user-modified data persist across loops (not that it can anyways)
			Make overrideData only an input parameter?
				Have launchSelectorPopup() return an array of all info
					Can still read from data overrides, and write to data array - but data array is separate (although probably still a copy so non-shown stuff comes through) and is a sub-part of overall returned array:
						retAry["CHOICE_INPUT"]  := userIn
						retAry["OVERRIDE_DATA"] := overrideData
					getDataFromGui should just return an updated array ("" if array would be empty), not true/false with a byref array
	Selector - break launchSelectorPopup() down, maybe turn it into a class of sorts?
	Add some way to show progress for long-running scripts - maybe using a tooltip or something?
	Audit all scripts for unused hotkeys
		Come up with centralized (or something that reads scripts and creates one) documentation of hotkeys?
	Go through pukkandan's startup script (https://github.com/pukkandan/My-Startup-Script) and pull out anything interesting
		Lib
			Toast - for displaying info with some hotkeys. Could be good for long-running stuff (like firstSetup)
		WinSizer - as a replacement/cross-pollination for KDE mover-sizer
		Tray - to make main script (and all standalone scripts) have a consistent tray menu
			Probably similar to what I did in my own share scripts?
	Build a way to auto-reformat .tl files?
		Fix widths so they work nicely
			Will need to have a tab width parameter/argument somewhere for this (maybe in _constants or config?)
		Take into account overflow, with next field being empty or placeholder'd
	
# Scripts to Share

# Documentation
	Debug
	Selector
		Settings passed in programmatically
	MainConfig and windows.tl support for RegEx in titles ({REGEX})

# Unit Tests
	ActionObject
